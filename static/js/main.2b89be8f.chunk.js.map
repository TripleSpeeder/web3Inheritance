{"version":3,"sources":["getWeb3.js","Components/PrepareForm/TokenSelector.js","erc20-decimals-conversion.js","Components/PrepareForm/AmountInputContainer.js","Components/PrepareForm/AddressInput.js","Components/PrepareForm/AddressInputContainer.js","Components/PrepareForm/DurationInput.js","Components/PrepareForm/StreamForm.js","Components/CreateForm/CreateForm.js","Components/CreateForm/CreateFormContainer.js","Components/StreamList/StreamList.js","Components/StreamList/StreamListController.js","Components/StreamModal.js","MainPage.js","Components/StreamDetails/StreamProgress.js","Components/StreamDetails/BalanceProgress.js","Components/StreamDetails/StreamDetails.js","Components/StreamDetails/StreamDetailsContainer.js","utils/contractLoader.js","App.js","index.js","utils/streamEventsABI.js","../../node_modules/web3-eth-accounts/src sync","supportedTokens.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","async","ethereum","web3","Web3","console","log","provider","providers","HttpProvider","TokenSelector","availableTokens","token","selectToken","useState","tokenOptions","setTokenOptions","selectedToken","setSelectedToken","useEffect","name","Object","entries","map","entry","value","key","text","Form","Field","Dropdown","selection","placeholder","options","address","undefined","onChange","ev","data","selectedTokenEntry","toBaseUnit","decimals","BN","s","String","Error","base","pow","negative","substring","comps","split","length","whole","fraction","wei","mul","add","neg","toString","AmountInputContainer","setAmount","account","precise","rounded","amount","utils","toBN","balance","setBalance","loadingBalance","setLoadingBalance","error","setError","localAmount","setLocalAmount","contractInstance","balanceOf","bnToDisplayString","roundToDecimals","getBalance","balanceInfo","symbol","Input","type","newValue","target","AddressInput","props","handleInput","loading","e","input","addressInputStates","AddressInputContainer","setAddress","addressInputState","setAddressInputState","setInput","validAddress","test","eth","ens","getAddress","resolvedAddress","DurationInput","handleDuration","label","labelPosition","newDays","seconds","parseInt","isNaN","min","max","StreamForm","createForm","cancel","setToken","recipient","setRecipient","durationSeconds","setDurationSeconds","valid","setValid","endTimestamp","setEndTimestamp","dailyRate","setDailyRate","gt","amountPerDay","div","calcRate","formValid","gtn","summaryContent","Message","List","Item","dayjs","unix","format","Grid","columns","divided","Row","Column","width","size","duration","timestamp","verticalAlign","info","Header","textAlign","Button","fluid","content","disabled","positive","onClick","CreateForm","message","formState","streamId","retry","closeModal","createFormStates","CREATE_FORM_STATE_FINISHED","success","Content","as","Link","to","icon","Icon","Group","Or","CREATE_FORM_STATE_WAITING_ALLOWANCE","Step","vertical","active","CREATE_FORM_STATE_CHECKING_BALANCE","completed","Title","CREATE_FORM_STATE_CHECKING_ALLOWANCE","Description","CREATE_FORM_STATE_WAITING_STREAM","Segment","basic","CreateFormContainer","sender","sealedSablierInstance","setStreamId","setFormState","calcTimeStamps","useCallback","startTime","stopTime","calcFinalAmount","remainder","mod","sub","version","code","gte","amountDisplay","balanceDisplay","checkBalance","allowance","allowanceDisplay","checkAllowance","approve","from","finalAmount","timeStamps","createStream","result","event","receipt","rawLogs","find","topics","topicHash","decoded","abi","decodeLog","eventABI","slice","StreamList","streams","incoming","listItems","stream","streamID","StreamListController","goBack","loadingEvents","setLoadingEvents","incomingStreams","setIncomingStreams","outgoingStreams","setOutgoingStreams","all","getPastEvents","fromBlock","filter","incomingEvents","outgoingEvents","incomingArray","returnValues","deposit","tokenAddress","outgoingArray","loadEvents","Fragment","StreamModal","open","handleClose","initialPhase","sealedSablierContractInstance","ERC1620ContractInstance","setAccount","streamOptions","setStreamOptions","phase","setPhase","loadingAccount","setLoadingAccount","enable","getAccounts","accounts","obtainAccount","headline","color","keys","Modal","MainPage","Actions","setOpen","ready","alert","primary","HomepageHeading","inverted","Container","style","marginBottom","fontSize","fontWeight","marginTop","subheader","Explainer","padding","container","stackable","floated","href","extend","relativeTime","StreamProgress","progressPercent","description","startTimestamp","stopTimestamp","now","started","isBefore","stopped","elapsedSeconds","Math","round","Progress","percent","progress","BalanceProgress","balancePercent","remainingBalance","recipientBalance","withDrawnAmount","isZero","eq","muln","lockedBalanceDisplay","recipientBalanceDisplay","toNumber","StreamDetails","modalContent","streamDetails","withdraw","withdrawing","withdrawButton","isRecipient","contract","require","ERC20Data","StreamDetailsContainer","ERC1620Instance","useParams","loadingDetails","setLoadingDetails","setStreamDetails","withDrawing","setWithDrawing","getStream","erc20Contract","setProvider","currentProvider","at","tokanAddress","ratePerSecond","loadStreamDetails","withdrawFromStream","nextStreamDetails","supportedTokens","ERC20MockData","instantiateContract","loadTokens","contracts","net","getId","networkId","tokens","erc20MockContract","deployed","contractObj","App","setWeb3","setSealedSablierContractInstance","setERC1620ContractInstance","setAvailableTokens","loadingWeb3","setLoadingWeb3","loadingTokens","setLoadingTokens","loadingSablier","setLoadingSablier","loadingERC1620","setLoadingERC1620","SealedSablierContract","SealedSablierContractData","obtainSealedSablierInstance","ERC1620Contract","IERC1620ContractData","Sablier","obtainERC1620","Menu","fixed","header","path","horizontal","Popup","trigger","ReactDOM","render","document","getElementById","module","exports","webpackEmptyContext","req","id"],"mappings":"kMA8BeA,EA5BC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,QAAQ,gCAAAC,EAAAC,OAAA,gDAE1BH,OAAOI,UACHC,EAAO,IAAIC,IAAKN,OAAOI,UAC7BN,EAAQO,IAGDL,OAAOK,MAERA,EAAOL,OAAOK,KACpBE,QAAQC,IAAI,2BACZV,EAAQO,KAIFI,EAAW,IAAIH,IAAKI,UAAUC,aAClC,yBAEIN,EAAO,IAAIC,IAAKG,GACtBF,QAAQC,IAAI,gDACZV,EAAQO,IApBoB,4C,2HCmDrBO,MA7Cf,YAA+D,IAAvCC,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,YAAc,EAElBC,mBAAS,IAFS,mBAEnDC,EAFmD,KAErCC,EAFqC,OAGhBF,qBAHgB,mBAGnDG,EAHmD,KAGpCC,EAHoC,KA+B1D,OA1BAC,qBAAU,WACFP,GACAP,QAAQC,IAAI,wBAA0BM,EAAMQ,MAC5CF,EAAiBN,IAEjBP,QAAQC,IAAI,+BAEjB,CAACM,IAEJO,qBAAU,WACNH,EAAgBK,OAAOC,QAAQX,GAAiBY,KAAI,SAAAC,GAAK,MACrD,CACIC,MAAOD,EAAM,GACbE,IAAMF,EAAM,GACZG,KAAMH,EAAM,GAAGJ,YAGxB,CAACT,IAUA,kBAACiB,EAAA,EAAKC,MAAN,KACI,iEACA,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,YAAa,eACbC,QAASlB,EACTU,MAAOR,EAAgBA,EAAciB,aAAUC,EAC/CC,SAdZ,SAAsBC,EAAIC,GACtB,IAAMC,EAAqB5B,EAAgB2B,EAAKb,OAChDpB,QAAQC,IAAIiC,GACZ1B,EAAY0B,QCnCb,SAASC,EAAWf,EAAOgB,EAAUC,GAC1C,KAJqB,kBADLC,EAKFlB,IAJmBkB,aAAaC,QAK5C,MAAM,IAAIC,MAAM,4DANpB,IAAkBF,EASVG,EADM,IAAIJ,EAAG,IACFK,IAAI,IAAIL,EAAGD,IAGxBO,EAAsC,MAA1BvB,EAAMwB,UAAU,EAAG,GAKnC,GAJID,IACFvB,EAAQA,EAAMwB,UAAU,IAGZ,MAAVxB,EACF,MAAM,IAAIoB,MACV,wBAAiBpB,EAAjB,qDACqBgB,EADrB,eAKF,IAAIS,EAAQzB,EAAM0B,MAAM,KACxB,GAAID,EAAME,OAAS,EAAK,MAAM,IAAIP,MAAM,2BAExC,IAAIQ,EAAQH,EAAM,GAAII,EAAWJ,EAAM,GAIvC,GAFKG,IAASA,EAAQ,KACjBC,IAAYA,EAAW,KACxBA,EAASF,OAASX,EACpB,MAAM,IAAII,MAAM,2BAGlB,KAAOS,EAASF,OAASX,GACvBa,GAAY,IAGdD,EAAQ,IAAIX,EAAGW,GACfC,EAAW,IAAIZ,EAAGY,GAClB,IAAIC,EAAOF,EAAMG,IAAIV,GAAOW,IAAIH,GAMhC,OAJIN,IACFO,EAAMA,EAAIG,OAGL,IAAIhB,EAAGa,EAAII,SAAS,IAAK,I,+BCiCnBC,EAnEc,SAAC,GAAuC,IAAtCzD,EAAqC,EAArCA,KAAM0D,EAA+B,EAA/BA,UAAWjD,EAAoB,EAApBA,MAAOkD,EAAa,EAAbA,QAAa,EAClChD,mBAAS,CACnCiD,QAAS,GACTC,QAAS,GACTC,OAAO9D,EAAK+D,MAAMC,KAAK,KAJqC,mBACzDC,EADyD,KAChDC,EADgD,OAMpBvD,oBAAS,GANW,mBAMzDwD,EANyD,KAMzCC,EANyC,OAOtCzD,oBAAS,GAP6B,mBAOzD0D,EAPyD,KAOlDC,EAPkD,OAQ1B3D,mBAAS,KARiB,mBAQzD4D,EARyD,KAQ5CC,EAR4C,KAWhExD,qBAAU,WAYFP,GAASkD,GAXM,yBAAA9D,EAAAC,OAAA,uDACfsE,GAAkB,GADH,WAAAvE,EAAA,MAEKY,EAAMgE,iBAAiBC,UAAUf,IAFtC,OAEXM,EAFW,SAGUU,IAAkB,CACvCrD,MAAO2C,EACP3B,SAAU7B,EAAM6B,SAChBsC,gBAAiB5E,EAAK+D,MAAMC,KAAK,KAHhCJ,EAHU,EAGVA,QAASC,EAHC,EAGDA,QAKdK,EAAW,CAACN,UAASC,UAASC,OAAQG,IACtCG,GAAkB,GATH,qCAYfS,KAEL,CAACpE,EAAOkD,EAAS3D,IAGpBgB,qBAAU,WACN,GAAIP,EAAO,CACP,IAAIqD,EAASzB,EAAWkC,EAAa9D,EAAM6B,SAAUtC,EAAK+D,MAAMxB,IAChErC,QAAQC,IAAR,oBAAyBoE,EAAzB,eAA2CT,EAAON,aAClDE,EAAUI,MAEf,CAACrD,EAAO8D,EAAab,EAAW1D,IAEnC,IAUI8E,EAKJ,OAJKX,IACDW,EAAc,6CAAmBb,EAAQJ,QAA3B,IAAqCpD,EAAMsE,OAA3C,MAId,kBAACtD,EAAA,EAAKC,MAAN,CAAY2C,MAAOA,GACf,kEAAwCS,GACxC,kBAACE,EAAA,EAAD,CAAOC,KAAK,SAAShD,SAlBZ,SAACC,GACdoC,GAAS,GACT,IAAIY,EAAWhD,EAAGiD,OAAO7D,MACzBpB,QAAQC,IAAR,gCAAqC+E,IACjCA,EAAW,IACXA,EAAW,GAEfV,EAAeU,IAW8B5D,MAAOiD,MClC7Ca,EA9BM,SAACC,GAAW,IACtBC,EAAsCD,EAAtCC,YAAaC,EAAyBF,EAAzBE,QAASlB,EAAgBgB,EAAhBhB,MAAO/C,EAAS+D,EAAT/D,MAOpC,OACI,kBAACG,EAAA,EAAKC,MAAN,KACI,wDACA,kBAACD,EAAA,EAAKuD,MAAN,CACQ/D,KAAK,UACLY,YAAY,sBACZwC,MAAOA,EACPkB,QAASA,EACTtD,SAbK,SAAOuD,GAAP,eAAA3F,EAAAC,OAAA,gDACX2F,EAAMD,EAAEL,OAAO7D,MACrBgE,EAAYG,GAFK,sCAcLnE,MAAOA,MCjBdoE,EACU,oBADVA,EAEM,gBAFNA,EAGQ,kBAqDNC,EAlDe,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,WAAY5F,EAAU,EAAVA,KAAU,EACAW,mBAAS+E,GADT,mBAC3CG,EAD2C,KACxBC,EADwB,OAExBnF,mBAAS,IAFe,mBAE3C8E,EAF2C,KAEpCM,EAFoC,KAKlD/E,qBAAU,YACc,qBAAAnB,EAAAC,OAAA,mDAEVkG,EAAgB,uBAAuBC,KAAKR,IAC5B,YAAYQ,KAAKR,GAHvB,wBAMZK,EAAqBJ,GANT,oBAAA7F,EAAA,MAQsBG,EAAKkG,IAAIC,IAAIC,WAAWX,IAR9C,OAQFY,EARE,OASRnG,QAAQC,IAAR,mBAAwBsF,EAAxB,eAAoCY,IACpCP,EAAqBJ,GACrBE,EAAWS,GAXH,kDAaRnG,QAAQC,IAAI,qBAAuBsF,GACnCK,EAAqBJ,GAdb,gCAiBRM,GACJJ,EAAWH,GACXK,EAAqBJ,IAGrBI,EAAqBJ,GAtBT,yDAyBpBJ,KACD,CAACG,EAAOG,EAAY5F,IAEvB,IAAMqE,EAASwB,IAAsBH,EAC/BH,EAAWM,IAAsBH,EACvC,OACI,kBAAC,EAAD,CAAcJ,YAAaS,EACb1B,MAASA,EACTkB,QAASA,EACTjE,MAAOmE,K,iBCZda,EAlCO,SAACjB,GAAW,IACvBkB,EAAkBlB,EAAlBkB,eAcP,OACI,kBAAC9E,EAAA,EAAKC,MAAN,KACI,6EACA,kBAACsD,EAAA,EAAD,CACIwB,MAAO,OACPC,cAAe,QACfxB,KAAM,SACNhD,SAlBS,SAAOC,GAAP,iBAAArC,EAAAC,OAAA,gDACX4G,EAAUxE,EAAGiD,OAAO7D,OACtBqF,EAJc,MAIJC,SAASF,IACXG,QACR3G,QAAQC,IAAR,kBACAwG,EAAQ,GAEZzG,QAAQC,IAAR,0BAA+BuG,EAA/B,aAA2CC,EAA3C,cACAJ,EAAeI,GARE,sCAmBTG,IAAK,EACLC,IAAK,SCwHNC,EAzII,SAAC,GAA0D,IAAzDhH,EAAwD,EAAxDA,KAAMiH,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,OAAQ1G,EAA8B,EAA9BA,gBAAiBmD,EAAa,EAAbA,QAAa,EAI/ChD,qBAJ+C,mBAIlEF,EAJkE,KAI3D0G,EAJ2D,OAK7CxG,mBAASX,EAAK+D,MAAMC,KAAK,IALoB,mBAKlEF,EALkE,KAK1DJ,EAL0D,OAMvC/C,mBAAS,IAN8B,mBAMlEyG,EANkE,KAMvDC,EANuD,OAO3B1G,mBAAS,GAPkB,mBAOlE2G,EAPkE,KAOjDC,EAPiD,OAQ/C5G,oBAAS,GARsC,mBAQlE6G,EARkE,KAQ3DC,EAR2D,OASjC9G,qBATiC,mBASlE+G,EATkE,KASpDC,EAToD,OAUvChH,mBAAS,CAACiD,QAAS,GAAIC,QAAS,GAAIC,OAAO9D,EAAK+D,MAAMC,KAAK,KAVpB,mBAUlE4D,EAVkE,KAUvDC,EAVuD,KAazE7G,qBAAU,WAWFP,GAASA,EAAM6B,UAAYwB,EAAOgE,GAAG,IAAOR,GAV/B,WACb,IACIS,EADkBjE,EAAOkE,IAAIhI,EAAK+D,MAAMC,KAAKsD,IACdjE,IAAIrD,EAAK+D,MAAMC,KAdpC,QAYK,EAGMW,IAAkB,CACvCrD,MAAOyG,EACPzF,SAAU7B,EAAM6B,SAChBsC,gBAAiB5E,EAAK+D,MAAMC,KAAK,KAHhCJ,EAHc,EAGdA,QAASC,EAHK,EAGLA,QAKdgE,EAAa,CAACjE,UAASC,UAASC,OAAQiE,IAGxCE,KAEL,CAACnE,EAAQwD,EAAiB7G,EAAOT,EAzBd,QA4BtBgB,qBAAU,WACNd,QAAQC,IAAR,sCAA2C2D,EAA3C,sBAA+DsD,EAA/D,qBAAqFE,IACrF,IAAMY,EACDpE,EAAOqE,IAAI,IACG,KAAdf,GACAE,GAjCa,MAkClBpH,QAAQC,IAAR,iBAAsB+H,IACtBT,EAASS,KACV,CAACpE,EAAQsD,EAAWE,EApCD,QAuCtB,IAsBIc,EAYJ,OAVIA,EADAZ,EACiB,kBAACa,EAAA,EAAQC,KAAT,KACb,kBAACD,EAAA,EAAQE,KAAT,oBAA2BC,IAAMC,KAAKf,GAAcgB,OAAO,qBAC3D,kBAACL,EAAA,EAAQE,KAAT,oBAA2BX,EAAU/D,QAArC,IAA+CpD,EAAMsE,SAGxC,8EAMjB,kBAAC4D,EAAA,EAAD,CAAMC,QAAS,EAAGC,SAAO,GACrB,kBAACF,EAAA,EAAKG,IAAN,KACI,kBAACH,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAChB,kBAACvH,EAAA,EAAD,CAAMwH,KAAM,OACR,kBAAC,EAAD,CACIzI,gBAAiBA,EACjBC,MAAOA,EACPC,YAzBM,SAACD,GAC3BP,QAAQC,IAAR,0BAA+BM,IAC/B0G,EAAS1G,MAwBO,kBAAC,EAAD,CACIT,KAAMA,EACN8D,OAAQA,EACRJ,UAAWA,EACXjD,MAAOA,EACPkD,QAASA,IACb,kBAAC,EAAD,CACIiC,WAAYyB,EACZrH,KAAMA,IACV,kBAAC,EAAD,CACIuG,eArDC,SAAC2C,GACtB,IAAIC,EAAYX,MAAQC,OAASS,EACjChJ,QAAQC,IAAR,4BAAiCgJ,IACjC5B,EAAmB2B,GACnBvB,EAAgBwB,QAoDR,kBAACR,EAAA,EAAKI,OAAN,CAAaC,MAAO,EAAGI,cAAe,UAClC,kBAACf,EAAA,EAAD,CAASgB,MAAI,EAACJ,KAAM,OAChB,kBAACZ,EAAA,EAAQiB,OAAT,gBACClB,KAIb,kBAACO,EAAA,EAAKG,IAAN,CAAUS,UAAW,aACjB,kBAACZ,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAChB,kBAACQ,EAAA,EAAD,CACIC,OAAK,EACLC,QAAQ,gBACRC,UAAWnC,EACXoC,UAAQ,EACRX,KAAM,MACNY,QAhEH,WAEb5C,EAAW,CACPxG,QACAqD,SACAsD,YACA8B,SAAUlJ,EAAK+D,MAAMC,KAAKsD,SA6DtB,kBAACqB,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAChB,kBAACQ,EAAA,EAAD,CACIC,OAAK,EACLC,QAAQ,SACR7G,UAAQ,EACRoG,KAAM,MACNY,QAAS3C,Q,UCnBlB4C,MAlGf,YAA8E,IAEtEC,EAFaC,EAAwD,EAAxDA,UAAWC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,MAAOhD,EAA4B,EAA5BA,OAAoB7C,GAAQ,EAApB8F,WAAoB,EAAR9F,OA2CjE,OAvCI0F,EADAC,IAAcI,EAAiBC,2BACrB,kBAAChC,EAAA,EAAD,CAASiC,SAAO,EAACrB,KAAM,OAC7B,kBAACZ,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,iBACA,mEACA,8CAAmB,4BAAKW,EAAL,MACnB,kBAACT,EAAA,EAAD,CAAQgB,GAAIC,IAAMC,GAAE,mBAAcT,GAAYL,UAAQ,EAACX,KAAM,OAA7D,iBAGD5E,EACG,kBAACgE,EAAA,EAAD,CAASsC,MAAI,EAACtG,OAAK,EAAC4E,KAAM,OAChC,kBAAC2B,EAAA,EAAD,CAAM3J,KAAK,gBACX,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,yBACA,2BAAIjF,GACJ,kBAACmF,EAAA,EAAOqB,MAAR,CAAcpB,OAAK,EAACR,KAAM,OACtB,kBAACO,EAAA,EAAD,CAAQI,UAAQ,EAACC,QAASK,GAA1B,SACA,kBAACV,EAAA,EAAOsB,GAAR,MACA,kBAACtB,EAAA,EAAD,CAAQ3G,UAAQ,EAACgH,QAAS3C,GAA1B,aAIL8C,IAAcI,EAAiBW,oCAC5B,kBAAC1C,EAAA,EAAD,CAASsC,MAAI,EAACtB,MAAI,EAACJ,KAAM,OAC/B,kBAAC2B,EAAA,EAAD,CAAM3J,KAAK,SACX,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,6BADJ,+BAOM,kBAACjB,EAAA,EAAD,CAASsC,MAAI,EAACtB,MAAI,EAACJ,KAAM,OAC/B,kBAAC2B,EAAA,EAAD,CAAM3J,KAAK,SACX,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,wBADJ,yBAOJ,kBAACX,EAAA,EAAD,CAAMC,QAAS,GACX,kBAACD,EAAA,EAAKG,IAAN,KACI,kBAACH,EAAA,EAAKI,OAAN,KACI,kBAACiC,EAAA,EAAKH,MAAN,CAAYI,UAAQ,EAACxB,OAAK,EAACR,KAAK,OAC5B,kBAAC+B,EAAA,EAAD,CACIE,OAAQlB,IAAcI,EAAiBe,mCACvCC,UAAWpB,EAAYI,EAAiBe,oCAExC,kBAACP,EAAA,EAAD,CAAM3J,KAAK,WACX,kBAAC+J,EAAA,EAAKT,QAAN,KACI,kBAACS,EAAA,EAAKK,MAAN,kBAGR,kBAACL,EAAA,EAAD,CACIE,OACKlB,IAAcI,EAAiBkB,sCAC/BtB,IAAcI,EAAiBW,oCAEpCK,UAAWpB,EAAYI,EAAiBW,qCAExC,kBAACH,EAAA,EAAD,CAAM3J,KAAO+I,IAAcI,EAAiBW,oCACxC,kBAAkB,aAEtB,kBAACC,EAAA,EAAKT,QAAN,KACI,kBAACS,EAAA,EAAKK,MAAN,kBACErB,IAAcI,EAAiBW,qCACjC,kBAACC,EAAA,EAAKO,YAAN,iDAGR,kBAACP,EAAA,EAAD,CACIE,OAAQlB,IAAcI,EAAiBoB,iCACvCJ,UAAWpB,EAAYI,EAAiBoB,kCAExC,kBAACZ,EAAA,EAAD,CAAM3J,KAAO+I,IAAcI,EAAiBoB,iCACxC,kBAAkB,aAEtB,kBAACR,EAAA,EAAKT,QAAN,KACI,kBAACS,EAAA,EAAKK,MAAN,wBACErB,IAAcI,EAAiBoB,kCACjC,kBAACR,EAAA,EAAKO,YAAN,mDAKhB,kBAAC5C,EAAA,EAAKI,OAAN,CAAaK,cAAc,UACvB,kBAACqC,EAAA,EAAD,CAASC,OAAK,GACT3B,O,SClGZK,EAAmB,CAC5Be,mCAAoC,GACpCG,qCAAsC,GACtCP,oCAAqC,GACrCS,iCAAkC,GAClCnB,2BAA4B,IA8KjBsB,EA3Ka,SAAC,GAAmG,IAAlG3L,EAAiG,EAAjGA,KAAM4L,EAA2F,EAA3FA,OAAQnL,EAAmF,EAAnFA,MAAOqD,EAA4E,EAA5EA,OAAQ+H,EAAoE,EAApEA,sBAAuBzE,EAA6C,EAA7CA,UAAW8B,EAAkC,EAAlCA,SAAUhC,EAAwB,EAAxBA,OAAQiD,EAAgB,EAAhBA,WAAgB,EAE3FxJ,mBAAS,GAFkF,mBAEpHsJ,EAFoH,KAE1G6B,EAF0G,OAGjGnL,mBAAS,IAHwF,mBAGpH0D,EAHoH,KAG7GC,EAH6G,OAIzF3D,mBAASyJ,EAAiBe,oCAJ+D,mBAIpHnB,EAJoH,KAIzG+B,EAJyG,KAOrHC,EAAiBC,uBAAY,WAE/B,IAAIC,EAAYlM,EAAK+D,MAAMC,KAAKwE,MAAQC,OAAU,KAClD,MAAO,CACHyD,YACAC,SAAUD,EAAU5I,IAAI4F,MAE7B,CAACA,EAAUlJ,EAAK+D,QAGbqI,EAAkBH,uBAAY,WAChC,IAAII,EAAYvI,EAAOwI,IAAIpD,GAC3B,OAAOpF,EAAOyI,IAAIF,KACnB,CAACvI,EAAQoF,IAIZlI,qBAAU,WAoFN,OADAd,QAAQC,IAAR,mCAAwCH,EAAKwM,UACtCxC,GACH,KAAKI,EAAiBe,oCApFL,uBAAAtL,EAAAC,OAAA,uDACjBI,QAAQC,IAAI,oBACZmE,EAAS,IAFQ,oBAAAzE,EAAA,MAKGY,EAAMgE,iBAAiBC,UAAUkH,IALpC,OAKb3H,EALa,8DAOb/D,QAAQC,IAAI,yBACZmE,EAAS,0BAAD,OAA2B,KAAMmI,KAAjC,cAA2C,KAAM1C,UAR5C,2BAWb9F,EAAQyI,IAAI5I,GACZiI,EAAa3B,EAAiBkB,uCAExBqB,EAAgBhI,IAAkB,CACpCrD,MAAOwC,EACPxB,SAAU7B,EAAM6B,SAChBsC,gBAAiB5E,EAAK+D,MAAMC,KAAK,KAE/B4I,EAAiBjI,IAAkB,CACrCrD,MAAO2C,EACP3B,SAAU7B,EAAM6B,SAChBsC,gBAAiB5E,EAAK+D,MAAMC,KAAK,KAErCM,EAAS,+BAAD,OAAgCqI,EAAc9I,QAA9C,YAAyDpD,EAAMsE,OAA/D,wBAAqF6H,EAAe/I,QAApG,YAA+GpD,EAAMsE,OAArH,OAxBK,wDAqFb8H,GACA,MACJ,KAAKzC,EAAiBkB,sCA5DH,uBAAAzL,EAAAC,OAAA,uDACnBI,QAAQC,IAAI,sBACZmE,EAAS,IAFU,WAAAzE,EAAA,MAGGY,EAAMgE,iBAAiBqI,UAAUlB,EAAQC,EAAsB9J,UAHlE,QAGf+K,EAHe,QAILJ,IAAI5I,GACdiI,EAAa3B,EAAiBoB,mCAExBmB,EAAgBhI,IAAkB,CACpCrD,MAAOwC,EACPxB,SAAU7B,EAAM6B,SAChBsC,gBAAiB5E,EAAK+D,MAAMC,KAAK,KAE/B+I,EAAmBpI,IAAkB,CACvCrD,MAAOwL,EACPxK,SAAU7B,EAAM6B,SAChBsC,gBAAiB5E,EAAK+D,MAAMC,KAAK,KAErCM,EAAS,mCAAD,OAAoCqI,EAAc9I,QAAlD,YAA6DpD,EAAMsE,OAAnE,wBAAyFgI,EAAiBlJ,QAA1G,YAAqHpD,EAAMsE,SACnIgH,EAAa3B,EAAiBW,sCAlBf,qCA6DfiC,GACA,MACJ,KAAK5C,EAAiBW,oCA1CL,EAAAlL,EAAAC,OAAA,uDACjBI,QAAQC,IAAR,+BAAoC2D,EAAON,aAC3Cc,EAAS,IAFQ,oBAAAzE,EAAA,MAIPY,EAAMgE,iBAAiBwI,QAAQpB,EAAsB9J,QAAS+B,EAAON,WAAY,CAAC0J,KAAMtB,KAJjF,OAKbG,EAAa3B,EAAiBoB,kCALjB,gDAObtL,QAAQC,IAAI,yBACZmE,EAAS,0BAAD,OAA2B,KAAMmI,KAAjC,cAA2C,KAAM1C,UAR5C,wDA4Cb,MACJ,KAAKK,EAAiBoB,kCAlCL,2BAAA3L,EAAAC,OAAA,uDACjBI,QAAQC,IAAR,mBACAmE,EAAS,IACH6I,EAAcf,IACpBlM,QAAQC,IAAR,4BAAiCgN,EAAjC,wBAA4DrJ,EAA5D,MACMsJ,EAAapB,IALF,oBAAAnM,EAAA,MAOMgM,EAAsBwB,aAAajG,EAAW+F,EAAY3J,WAAY/C,EAAMgE,iBAAiB1C,QAASqL,EAAWlB,UAAU1I,WAAY4J,EAAWjB,SAAS3I,WAAY,CAAC0J,KAAMtB,KAPpL,OAOT0B,EAPS,OAUTC,EAAQD,EAAOE,QAAQC,QAAQC,MAAK,SAAAvN,GACpC,OAAQA,EAAIwN,OAAO,KAAOC,eAG1BC,EAAU7N,EAAKkG,IAAI4H,IAAIC,UAAUC,WAAUT,EAAMpL,KAAMoL,EAAMI,OAAOM,MAAM,IAC9E/N,QAAQC,IAAI0N,GACZ/B,EAAYlF,SAASiH,EAAQ5D,WAC7B8B,EAAa3B,EAAiBC,4BAjBjB,kDAmBbnK,QAAQC,IAAI,+BACZmE,EAAS,gCAAD,OAAiC,KAAMmI,KAAvC,cAAiD,KAAM1C,UApBlD,yDAmCbsD,GACA,MACJ,KAAKjD,EAAiBC,2BAClB,MACJ,QACInK,QAAQC,IAAR,0BAA+B6J,OAExC,CACClG,EACAsI,EACAJ,EACAhC,EACA5C,EACAyE,EACAD,EACAnL,EAAMgE,iBACNhE,EAAM6B,SACN7B,EAAMsE,OACN/E,EAAKkG,IAAI4H,IACT9N,EAAK+D,MACL/D,EAAKwM,UAQT,OACI,kBAAC,EAAD,CACIxC,UAAWA,EACXE,MARQ,WAEZ6B,EAAa3B,EAAiBe,qCAO1BlB,SAAUA,EACV5F,MAAOA,EACP6C,OAAQA,EACRiD,WAAYA,K,UCzHT+D,MAtCf,YAA0C,IAArBC,EAAoB,EAApBA,QACjB,GADqC,EAAXC,SACZ,CACV,GAAID,EAAQlL,OAAS,EAAG,CAEpB,IAAIoL,EAAYF,EAAQ/M,KAAI,SAACkN,GAAD,OACxB,kBAAChG,EAAA,EAAKC,KAAN,CAAWhH,IAAK+M,EAAOC,UACnB,kBAAC/E,EAAA,EAAD,CAAQgB,GAAIC,IAAMC,GAAE,mBAAc4D,EAAOC,WAAaD,EAAOC,UADjE,SAC0FD,EAAO1C,WAGrG,OAAO,kBAACtD,EAAA,EAAD,KAAO+F,GAGd,OAAO,kBAAChG,EAAA,EAAD,CAASgB,MAAI,EAACJ,KAAM,OACvB,kBAACZ,EAAA,EAAQkC,QAAT,uDAMR,GAAI4D,EAAQlL,OAAS,EAAG,CAEpB,IAAIoL,EAAYF,EAAQ/M,KAAI,SAACkN,GAAD,OACxB,kBAAChG,EAAA,EAAKC,KAAN,CAAWhH,IAAK+M,EAAOC,UACnB,kBAAC/E,EAAA,EAAD,CAAQgB,GAAIC,IAAMC,GAAE,mBAAc4D,EAAOC,WAAaD,EAAOC,UADjE,OACwFD,EAAOlH,cAGnG,OAAO,kBAACkB,EAAA,EAAD,KAAO+F,GAGd,OAAO,kBAAChG,EAAA,EAAD,CAASgB,MAAI,EAACJ,KAAM,OACvB,kBAACZ,EAAA,EAAQkC,QAAT,wDCgDDiE,MA5Ef,YAAyE,IAA1C7K,EAAyC,EAAzCA,QAASkI,EAAgC,EAAhCA,sBAAuB4C,EAAS,EAATA,OAAS,EAE1B9N,oBAAS,GAFiB,mBAE7D+N,EAF6D,KAE9CC,EAF8C,OAGtBhO,mBAAS,IAHa,mBAG7DiO,EAH6D,KAG5CC,EAH4C,OAItBlO,mBAAS,IAJa,mBAI7DmO,EAJ6D,KAI5CC,EAJ4C,KAuDpE,OAjDA/N,qBAAU,YACa,6BAAAnB,EAAAC,OAAA,uDACf6O,GAAiB,GADF,WAAA9O,EAAA,MAE8BL,QAAQwP,IAAI,CACrDnD,EAAsBoD,cAAc,qBAAsB,CACtDC,UAAW,EACXC,OAAQ,CACJ/H,UAAWzD,KAGnBkI,EAAsBoD,cAAc,qBAAsB,CACtDC,UAAW,EACXC,OAAQ,CACJvD,OAAQjI,QAZL,mCAEVyL,EAFU,KAEMC,EAFN,KAiBfnP,QAAQC,IAAR,oBAAyBiP,IACzBlP,QAAQC,IAAR,oBAAyBkP,IACrBC,EAAgBF,EAAehO,KAAI,SAAAmM,GAAK,MACxC,CACIgB,SAAUhB,EAAMgC,aAAatF,SAC7B2B,OAAQ2B,EAAMgC,aAAa3D,OAC3BxE,UAAWmG,EAAMgC,aAAanI,UAC9BoI,QAASjC,EAAMgC,aAAaC,QAC5BtD,UAAWqB,EAAMgC,aAAarD,UAC9BC,SAAUoB,EAAMgC,aAAapD,SAC7BsD,aAAclC,EAAMgC,aAAaE,iBAGzCZ,EAAmBS,GACfI,EAAgBL,EAAejO,KAAI,SAAAmM,GAAK,MACxC,CACIgB,SAAUhB,EAAMgC,aAAatF,SAC7B2B,OAAQ2B,EAAMgC,aAAa3D,OAC3BxE,UAAWmG,EAAMgC,aAAanI,UAC9BoI,QAASjC,EAAMgC,aAAaC,QAC5BtD,UAAWqB,EAAMgC,aAAarD,UAC9BC,SAAUoB,EAAMgC,aAAapD,SAC7BsD,aAAclC,EAAMgC,aAAaE,iBAGzCV,EAAmBW,GACnBf,GAAiB,GA3CF,sCA6CnBgB,KACD,CAAC9D,EAAuBlI,IAEvB+K,EACO,kBAACrG,EAAA,EAAD,CAASsC,MAAI,EAACtB,MAAI,EAACJ,KAAM,OAC5B,kBAAC2B,EAAA,EAAD,CAAMrF,SAAO,EAACtE,KAAK,YACnB,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,wBADJ,2CAQJ,kBAAC,IAAMsG,SAAP,KACI,kBAACtG,EAAA,EAAD,CAAQkB,GAAG,MAAX,oBACA,kBAAC,EAAD,CAAY2D,QAASS,EAAiBR,UAAU,IAChD,kBAAC9E,EAAA,EAAD,CAAQkB,GAAG,MAAX,oBACA,kBAAC,EAAD,CAAY2D,QAASW,EAAiBV,UAAU,IAChD,kBAAC5E,EAAA,EAAD,CAAQK,QAAS4E,GAAjB,UCoFGoB,EA/JK,SAAC,GAAsH,IAArH7P,EAAoH,EAApHA,KAAM8P,EAA8G,EAA9GA,KAAMC,EAAwG,EAAxGA,YAAaC,EAA2F,EAA3FA,aAAcC,EAA6E,EAA7EA,8BAA+BC,EAA8C,EAA9CA,wBAAyB1P,EAAqB,EAArBA,gBAAqB,EACxGG,mBAAS,IAD+F,mBAC/HgD,EAD+H,KACtHwM,EADsH,OAE5FxP,mBAAS,IAFmF,mBAE/HyP,EAF+H,KAEhHC,EAFgH,OAG5G1P,mBAASqP,GAHmG,mBAG/HM,EAH+H,KAGxHC,EAHwH,OAI1F5P,oBAAS,GAJiF,mBAI/H6P,EAJ+H,KAI/GC,EAJ+G,KAMtIzP,qBAAU,WAeH8O,GAdmB,mBAAAjQ,EAAAC,OAAA,uDAClB2Q,GAAkB,GADA,oBAAA5Q,EAAA,MAIRF,OAAOI,SAAS2Q,UAJR,yBAAA7Q,EAAA,MAMSG,EAAKkG,IAAIyK,eANlB,OAMRC,EANQ,OAOdT,EAAWS,EAAS,IACpB1Q,QAAQC,IAAI,eARE,kDAUdD,QAAQC,IAAI,oCAVE,QAYlBsQ,GAAkB,GAZA,yDAelBI,KAEL,CAACf,EAAM9P,IAEV,IAOI0J,EAASoH,EAoGb,MAjGgB,KAAZnN,EACI6M,GACAtQ,QAAQC,IAAI,gCACZuJ,EAAU,kBAACrB,EAAA,EAAD,CAASgB,MAAI,EAACsB,MAAI,GACxB,kBAACC,EAAA,EAAD,CAAM3J,KAAM,UAAWsE,SAAO,IAC9B,kBAAC8C,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,uBADJ,2DAMJI,EAAU,kBAACrB,EAAA,EAAD,CAAShE,OAAK,EAACsG,MAAI,GACzB,kBAACC,EAAA,EAAD,CAAM3J,KAAM,gBACZ,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,kCACA,qGACA,kBAACE,EAAA,EAAD,CAAQuH,MAAO,QAASlH,QAASkG,GAAjC,UAONE,EAcAC,EAeAhP,OAAO8P,KAAKxQ,GAAiByC,OAWtB,IAARqN,GACLQ,EAAW,8BACXpH,EAAU,kBAAC,EAAD,CACN1J,KAAMA,EACNiH,WA7Ee,SAACmJ,GACpBlQ,QAAQC,IAAI,qBACZD,QAAQC,IAAIiQ,GACZC,EAAiBD,GACjBG,EAAS,IA0ELrJ,OAAQ6I,EACRvP,gBAAiBA,EACjBmD,QAASA,KAGE,IAAV2M,GACLQ,EAAW,8BACXpH,EAAU,kBAAC,EAAD,CACN1J,KAAMA,EACNS,MAAO2P,EAAc3P,MACrBmL,OAAQjI,EACRkI,sBAAuBoE,EACvBnM,OAAQsM,EAActM,OACtBsD,UAAWgJ,EAAchJ,UACzB8B,SAAUkH,EAAclH,SACxBhC,OAAQ,WAAKqJ,EAAS,IACtBpG,WAAY4F,KAGD,IAAVO,IACLQ,EAAW,wBACXpH,EAAU,kBAAC,EAAD,CACN/F,QAASA,EACT3D,KAAMA,EACN6L,sBAAuBoE,EACvBxB,OAAQsB,KAxCZrG,EAAU,kBAACrB,EAAA,EAAD,CAAShE,OAAK,EAACsG,MAAI,GACzB,kBAACC,EAAA,EAAD,CAAM3J,KAAM,gBACZ,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,qCACA,yFAA8D,+CAA9D,sCAEA,kBAACE,EAAA,EAAD,CAAQuH,MAAO,QAASlH,QAASkG,GAAjC,UApBRrG,EAAU,kBAACrB,EAAA,EAAD,CAAShE,OAAK,EAACsG,MAAI,GACzB,kBAACC,EAAA,EAAD,CAAM3J,KAAM,gBACZ,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,wCACA,yFAC+D,+CAD/D,yCAIA,kBAACE,EAAA,EAAD,CAAQuH,MAAO,QAASlH,QAASkG,GAAjC,UAvBRrG,EAAU,kBAACrB,EAAA,EAAD,CAAShE,OAAK,EAACsG,MAAI,GACzB,kBAACC,EAAA,EAAD,CAAM3J,KAAM,gBACZ,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,8CACA,yFAC+D,+CAD/D,gEAIA,kBAACE,EAAA,EAAD,CAAQuH,MAAO,QAASlH,QAASkG,GAAjC,UAkER,kBAACkB,EAAA,EAAD,CACInB,KAAMA,EACN7G,KAAM,SAEN,kBAACgI,EAAA,EAAM3H,OAAP,KACKwH,GAEL,kBAACG,EAAA,EAAM1G,QAAP,KACKb,KCLFwH,MApIf,YAA6G,IAerGC,EAfWnR,EAAyF,EAAzFA,KAAMiQ,EAAmF,EAAnFA,8BAA+BC,EAAoD,EAApDA,wBAAyB1P,EAA2B,EAA3BA,gBAAiB+E,EAAU,EAAVA,QAAU,EAEhF5E,mBAAS,GAFuE,mBAEjGmP,EAFiG,KAE3FsB,EAF2F,KAIlGC,EAASrR,GAAQiQ,GAAiCC,GAA2BhP,OAAO8P,KAAKxQ,GAAiByC,OAE1GsC,GAAc8L,IAChBnR,QAAQC,IAAI,gDACZmR,MAAM,mGASNH,EADAE,EACS,kBAAC,IAAMzB,SAAP,KACL,kBAACpG,EAAA,EAAD,CAAQ+H,SAAO,EAACtI,KAAK,UAAUY,QAAS,WAAKuH,EAAQ,KAArD,oBAEI,kBAACxG,EAAA,EAAD,CAAM3J,KAAK,iBAEf,kBAACuI,EAAA,EAAD,CAAQ+H,SAAO,EAACtI,KAAK,UAAUY,QAAS,WAAKuH,EAAQ,KAArD,oBAEI,kBAACxG,EAAA,EAAD,CAAM3J,KAAK,kBAIT,kBAACoH,EAAA,EAAD,CAASsC,MAAI,EAACtB,MAAI,EAACJ,KAAM,OAC/B,kBAAC2B,EAAA,EAAD,CAAMrF,SAAO,EAACtE,KAAK,YACnB,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,6BADJ,wCAOR,IAAMkI,EACF,kBAAC/F,EAAA,EAAD,CAASgG,UAAQ,EAAClI,UAAW,SAAU0B,UAAQ,GAC3C,kBAACyG,EAAA,EAAD,CACIlQ,MAAI,EACJmQ,MAAO,CAACC,aAAc,QAEtB,kBAACtI,EAAA,EAAD,CACIkB,GAAG,KACHd,QAAQ,8BACR+H,UAAQ,EACRE,MAAO,CACHE,SAAU,MACVC,WAAY,SACZC,UAAW,SAGnB,kBAACzI,EAAA,EAAD,CACIkB,GAAG,KACHd,QAAQ,oCACRsI,UAAU,yCACVP,UAAQ,EACRE,MAAO,CACHE,SAAU,QACVC,WAAY,SACZC,UAAW,WAGlBZ,IAIPc,EACF,kBAACxG,EAAA,EAAD,CAASkG,MAAO,CAAEO,QAAS,WAAajH,UAAQ,GAC5C,kBAACtC,EAAA,EAAD,CAAMwJ,WAAS,EAACC,WAAS,EAAChJ,cAAc,UACpC,kBAACT,EAAA,EAAKG,IAAN,KACI,kBAACH,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAChB,kBAACM,EAAA,EAAD,CAAQkB,GAAG,KAAKmH,MAAO,CAAEE,SAAU,QAAnC,0DAGA,uBAAGF,MAAO,CAAEE,SAAU,WAAtB,6PAMA,kBAACvI,EAAA,EAAD,CAAQkB,GAAG,KAAKmH,MAAO,CAAEE,SAAU,QAAnC,iBAGA,uBAAGF,MAAO,CAAEE,SAAU,WAAtB,4IAKJ,kBAAClJ,EAAA,EAAKI,OAAN,CAAasJ,QAAQ,QAAQrJ,MAAO,GAChC,kBAACM,EAAA,EAAD,CAAQkB,GAAG,KAAKmH,MAAO,CAAEE,SAAU,QAAnC,qBAGA,uBAAGF,MAAO,CAAEE,SAAU,WAAtB,mRAKA,uBAAGF,MAAO,CAAEE,SAAU,WAAtB,0KAIA,kBAACvI,EAAA,EAAD,CAAQkB,GAAG,KAAKmH,MAAO,CAAEE,SAAU,QAAnC,oBAGA,uBAAGF,MAAO,CAAEE,SAAU,WAAtB,iFAEO,uBAAGS,KAAM,8BAA+BnN,OAAQ,UAAhD,uBAFP,SASpB,OACI,kBAAC,IAAMyK,SAAP,KACK4B,EACAS,EACAnC,GAAQ,kBAAC,EAAD,CACLA,MAAM,EACNC,YA9GQ,WAChBqB,EAAQ,IA8GApR,KAAMA,EACNgQ,aAAcF,EACdG,8BAA+BA,EAC/BC,wBAAyBA,EACzB1P,gBAAiBA,M,iDCtIjCgI,IAAM+J,OAAOC,KA4CEC,OArCf,YAA0D,IAQlDC,EAGAC,EAXiBC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,cACjC3G,EAAY1D,IAAMC,KAAKmK,GACvBzG,EAAW3D,IAAMC,KAAKoK,GACtBC,EAAMtK,MACNlB,EAAkBuL,EAAgBD,EAClCG,EAAU7G,EAAU8G,SAASF,GAC7BG,EAAU9G,EAAS6G,SAASF,GAC5B5H,EAAU6H,IAAaE,EAK3B,GAAKF,GAGC,GAAIE,EACNN,EAAW,2BAAuBxG,EAASzD,OAP9B,qBAQbgK,EAAkB,SACf,GAAIxH,EAAQ,CACfyH,EAAW,6BAAyBG,EAAIpI,GAAGyB,IAC3C,IAAI+G,EAAiBJ,EAAIrK,OAASmK,EAClCF,EAAkBS,KAAKC,MAAqB,IAAfF,EAAoB5L,SARjDqL,EAAW,4BAAwBzG,EAAUxD,OAJhC,qBAKbgK,EAAkB,EAUtB,OACI,kBAACW,GAAA,EAAD,CACIpK,KAAM,MACNqK,QAASZ,EACTa,UAAQ,EACRrI,OAAQA,EACR6F,MAAO,QAEN4B,ICtCbnK,IAAM+J,OAAOC,KAuCEgB,OA7Bf,YAAoF,IAC5EC,EADkBlR,EAAyD,EAAzDA,GAAIiN,EAAqD,EAArDA,QAASkE,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,iBAAkBlT,EAAQ,EAARA,MAEnEmT,EAAkBpE,EAAQjD,IAAImH,GAE9BD,EADAG,EAAgBC,SACC,IAAItR,EAAG,GACjBqR,EAAgBE,GAAGtE,GACT,IAAIjN,EAAG,KAEPqR,EAAgBG,KAAK,KAAK/L,IAAIwH,GAGnD,IAAMwE,EAAuBrP,IAAkB,CAC3CrD,MAAOoS,EAAiBnH,IAAIoH,GAC5BrR,SAAU7B,EAAM6B,SAChBsC,gBAAiB,IAAIrC,EAAG,KAEtB0R,EAA0BtP,IAAkB,CAC9CrD,MAAOqS,EACPrR,SAAU7B,EAAM6B,SAChBsC,gBAAiB,IAAIrC,EAAG,KAExBoQ,EAAW,UAAMsB,EAAwBpQ,QAA9B,YAAyCpD,EAAMsE,OAA/C,oCAAiFiP,EAAqBnQ,QAAtG,YAAiHpD,EAAMsE,OAAvH,YAEf,OACI,kBAACsO,GAAA,EAAD,CAAUpK,KAAM,MAAOqK,QAASG,EAAeS,WAAYX,UAAQ,EAACxC,MAAO,QACtE4B,IC8CEwB,OApEf,YAAyG,IAEjGC,EAFgB7O,EAAgF,EAAhFA,QAAS0E,EAAuE,EAAvEA,SAAUoK,EAA6D,EAA7DA,cAAerU,EAA8C,EAA9CA,KAAMsU,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,YAAa5Q,EAAiB,EAAjBA,QAASlD,EAAQ,EAARA,MAG5F,GAAI8E,EACA6O,EAAe,kBAAC/L,EAAA,EAAD,CAASsC,MAAI,EAACtB,MAAI,EAACJ,KAAM,OACpC,kBAAC2B,EAAA,EAAD,CAAMrF,SAAO,EAACtE,KAAM,YACpB,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,uBACA,gFAGL,GAAK+K,EAQL,CAAC,IAGAG,EAFGhF,EAAoE6E,EAApE7E,QAAStD,EAA2DmI,EAA3DnI,UAAWC,EAAgDkI,EAAhDlI,SAAUuH,EAAsCW,EAAtCX,iBAAkBC,EAAoBU,EAApBV,iBAGvD,GAAIY,EACAC,EAAiB,kBAAChL,EAAA,EAAD,CAAQI,UAAQ,EAACe,MAAI,EAAC1B,KAAM,MAAOU,UAAQ,GACxD,kBAACiB,EAAA,EAAD,CAAMrF,SAAO,EAACtE,KAAM,YADP,gCAId,CAAC,IACC4C,EAAWc,IAAkB,CAC9BrD,MAAOqS,EACPrR,SAAU7B,EAAM6B,SAChBsC,gBAAiB5E,EAAK+D,MAAMC,KAAK,KAHhCH,QAKL2Q,EAAiB,kBAAChL,EAAA,EAAD,CAAQI,UAAQ,EAACX,KAAM,MAAOY,QAASyK,GAAvC,YAA2DzQ,EAA3D,IAAqEpD,EAAMsE,QAEhG,IAAM0P,EAAe9Q,IAAY0Q,EAAcjN,UAE/CgN,EAAe,kBAAC,IAAMxE,SAAP,KACX,kBAAC,GAAD,CACIgD,eAAgB1G,EAAUgI,WAC1BrB,cAAe1G,EAAS+H,aAE5B,kBAAC,GAAD,CACIP,iBAAkBA,EAClBlT,MAAOA,EACP8B,GAAIvC,EAAK+D,MAAMxB,GACfmR,iBAAkBA,EAClBlE,QAASA,IAEZiF,GAAe,2BAAID,SAtCxBJ,EAAe,kBAAC/L,EAAA,EAAD,CAASsC,MAAI,EAACtG,OAAK,EAAC4E,KAAM,OACrC,kBAAC2B,EAAA,EAAD,CAAM3J,KAAM,gBACZ,kBAACoH,EAAA,EAAQkC,QAAT,KACI,kBAAClC,EAAA,EAAQiB,OAAT,qCACA,+DAsCZ,OAAO,kBAAC2H,EAAA,EAAD,CAAOnB,MAAM,GAChB,kBAACmB,EAAA,EAAM3H,OAAP,eAAsBW,EAAtB,YACA,kBAACgH,EAAA,EAAM1G,QAAP,KACK6J,GAEL,kBAACnD,EAAA,EAAME,QAAP,KACI,kBAAC3H,EAAA,EAAD,CAAQgB,GAAIC,IAAMC,GAAI,KAClB,kBAACE,EAAA,EAAD,CAAM3J,KAAK,cADf,aCzENyT,GAAWC,EAAQ,KACnBC,GAAYD,EAAQ,KA8GXE,OAvGf,YAA0D,IAAzBC,EAAwB,EAAxBA,gBAAiB9U,EAAO,EAAPA,KACtCiK,EAAa8K,cAAb9K,SAD6C,EAETtJ,oBAAS,GAFA,mBAE9CqU,EAF8C,KAE9BC,EAF8B,OAGXtU,qBAHW,mBAG9C0T,EAH8C,KAG/Ba,EAH+B,OAIfvU,oBAAS,GAJM,mBAI9CwU,EAJ8C,KAIjCC,EAJiC,OAKvBzU,mBAAS,IALc,mBAK9CgD,EAL8C,KAKrCwM,EALqC,OAM3BxP,qBAN2B,mBAM9CF,EAN8C,KAMvC0G,EANuC,KAyFrD,OAjFAnG,qBAAU,WAgDF8T,GAAmB7K,GA/CG,iCAAApK,EAAAC,OAAA,uDACtBmV,GAAkB,GAClB/U,QAAQC,IAAR,uCAA4C8J,EAA5C,QAFsB,oBAAApK,EAAA,MAKZF,OAAOI,SAAS2Q,UALJ,yBAAA7Q,EAAA,MAMKG,EAAKkG,IAAIyK,eANd,cAMZC,EANY,OAOlBT,EAAWS,EAAS,IAPF,YAAA/Q,EAAA,MAUQiV,EAAgBO,UAAUpL,IAVlC,eAUdoK,EAVc,OAWlBnU,QAAQC,IAAIkU,IAGRiB,EAAgBZ,GAASE,KACfW,YAAYvV,EAAKwV,iBAfb,YAAA3V,EAAA,MAgBWyV,EAAcG,GAAGpB,EAAc5T,QAhB1C,eAgBdgE,EAhBc,mBAAA5E,EAAA,MAiBD4E,EAAiBxD,QAjBhB,eAiBdA,EAjBc,mBAAApB,EAAA,MAkBC4E,EAAiBM,UAlBlB,eAkBdA,EAlBc,mBAAAlF,EAAA,MAmBG4E,EAAiBnC,YAnBpB,eAmBdA,EAnBc,OAoBlBpC,QAAQC,IAAR,iBAAsBc,EAAtB,cAAgC8D,EAAhC,cAA4CzC,EAASkB,aACrD2D,EAAS,CACLlG,OACA8D,SACAzC,WACAmC,qBAzBc,YAAA5E,EAAA,MA6BWiV,EAAgBpQ,UAAUuF,EAAUoK,EAAcjN,YA7B7D,QA6BduM,EA7Bc,OA+BlBuB,EAAiB,CACb9N,UAAWiN,EAAcjN,UACzBoI,QAAS6E,EAAc7E,QACvBC,aAAc4E,EAAcqB,aAC5BxJ,UAAWmI,EAAcnI,UACzBC,SAAUkI,EAAclI,SACxBuH,iBAAkBW,EAAcX,iBAChCiC,cAAetB,EAAcsB,cAC7BhC,iBAAkBA,IAvCJ,kDA0ClBzT,QAAQC,IAAR,kDACA+U,OAAiBlT,GA3CC,QA6CtBiT,GAAkB,GA7CI,yDAgDtBW,KAEL,CAAC3L,EAAU6K,EAAiB9U,IA+B3B,kBAAC,GAAD,CACIuF,QAASyP,EACT/K,SAAUA,EACVoK,cAAeA,EACfrU,KAAMA,EACNuU,YAAaY,EACbb,SAlCS,8BAAAzU,EAAAC,OAAA,uDACbI,QAAQC,IAAR,sBAA2BkU,EAAcV,iBAAiBnQ,aAC1D4R,GAAe,GAFF,oBAAAvV,EAAA,MAIUiV,EAAgBe,mBAAmB5L,EAAUoK,EAAcV,iBAAiBnQ,WAAY,CAAC0J,KAAMvJ,KAJzG,OAIL2J,EAJK,OAKTpN,QAAQC,IAAI,yBACZD,QAAQC,IAAImN,GANH,kDAQTpN,QAAQC,IAAI,6BACZD,QAAQC,IAAR,MATS,2BAAAN,EAAA,MAYiBiV,EAAgBO,UAAUpL,IAZ3C,eAYT6L,EAZS,mBAAAjW,EAAA,MAagBiV,EAAgBpQ,UAAUuF,EAAU6L,EAAkB1O,YAbtE,QAaTuM,EAbS,OAcbuB,EAAiB,CACb9N,UAAW0O,EAAkB1O,UAC7BoI,QAASsG,EAAkBtG,QAC3BC,aAAcqG,EAAkBrG,aAChCvD,UAAW4J,EAAkB5J,UAC7BC,SAAU2J,EAAkB3J,SAC5BuH,iBAAkBoC,EAAkBpC,iBACpCiC,cAAeG,EAAkBH,cACjChC,iBAAkBA,IAEtByB,GAAe,GAxBF,0DAmCTzR,QAASA,EACTlD,MAAOA,K,yCChHbsV,GAAkBpB,EAAQ,KAC1BD,GAAWC,EAAQ,KACnBC,GAAYD,EAAQ,KACpBqB,GAAgBrB,EAAQ,KAExBsB,GAAsB,SAAOlU,EAAS3B,GAAhB,uBAAAP,EAAAC,OAAA,uDACpBwV,EAAgBZ,GAASE,KACfW,YAAYnV,GAFF,WAAAP,EAAA,MAGKyV,EAAcG,GAAG1T,IAHtB,cAGpB0C,EAHoB,kBAAA5E,EAAA,MAIP4E,EAAiBxD,QAJV,cAIpBA,EAJoB,mBAAApB,EAAA,MAKL4E,EAAiBM,UALZ,eAKpBA,EALoB,mBAAAlF,EAAA,MAMH4E,EAAiBnC,YANd,eAMpBA,EANoB,yBAOjB,CACHrB,OACA8D,SACAzC,WACAmC,qBAXoB,uCAoDbyR,GArCI,SAAOlW,GAAP,6CAAAH,EAAAC,OAAA,uDAEXqW,EAAY,GAFD,WAAAtW,EAAA,MAGOG,EAAKkG,IAAIkQ,IAAIC,SAHpB,UAGXC,EAHW,QAIXC,EAASR,GAAgBO,KACI,IAAlBC,EAAOtT,OALP,wBAMX/C,QAAQC,IAAR,iDAAsDmW,IACtDpW,QAAQC,IAAR,6BACIqW,EAAoB9B,GAASsB,KACfT,YAAYvV,EAAKwV,iBATxB,sBAAA3V,EAAA,MAWsB2W,EAAkBC,YAXxC,eAWHhS,EAXG,mBAAA5E,EAAA,MAYU4E,EAAiBxD,QAZ3B,eAYHA,EAZG,mBAAApB,EAAA,MAaY4E,EAAiBM,UAb7B,eAaHA,EAbG,mBAAAlF,EAAA,MAcc4E,EAAiBnC,YAd/B,QAcHA,EAdG,OAeHoU,EAAc,CACdzV,OACA8D,SACAzC,WACAmC,oBAEJ0R,EAAU1R,EAAiB1C,SAAW2U,EArB/B,mDAwBPxW,QAAQC,IAAR,uEAxBO,gCA2BXD,QAAQC,IAAR,kBAAuBe,OAAO8P,KAAKuF,GAAQtT,OAA3C,0BAAmEqT,EAAnE,MACApW,QAAQC,IAAIoW,GA5BD,+BA6BOA,EA7BP,0EA6BF9V,EA7BE,oBAAAZ,EAAA,MA8BiBoW,GAAoBxV,EAAMsB,QAAS/B,EAAKwV,kBA9BzD,QA8BHkB,EA9BG,OA+BPP,EAAU1V,EAAMsB,SAAW2U,EA/BpB,wSAkCRP,GAlCQ,qFCsHJQ,OA9Hf,WAAgB,IAAD,EACWhW,qBADX,mBACNX,EADM,KACA4W,EADA,OAE6DjW,qBAF7D,mBAENsP,EAFM,KAEyB4G,EAFzB,OAGiDlW,qBAHjD,mBAGNuP,EAHM,KAGmB4G,EAHnB,OAIiCnW,mBAAS,IAJ1C,mBAINH,EAJM,KAIWuW,EAJX,OAKyBpW,oBAAS,GALlC,mBAKNqW,EALM,KAKOC,EALP,OAM6BtW,oBAAS,GANtC,mBAMNuW,EANM,KAMSC,EANT,OAO+BxW,oBAAS,GAPxC,mBAONyW,EAPM,KAOUC,EAPV,OAQ+B1W,oBAAS,GARxC,mBAQN2W,EARM,KAQUC,EARV,KAUbvW,qBAAU,WACI,EAAAnB,EAAAC,OAAA,uDACVmX,GAAe,GADL,cAGRL,EAHQ,WAAA/W,EAAA,MAGMN,KAHN,kCAIRW,QAAQC,IAAI,YAJJ,kDAMRD,QAAQC,IAAR,uBACAD,QAAQC,IAAR,MACAmR,MAAM,mDARE,QAYV2F,GAAe,GAZL,2DAeX,IAEHjW,qBAAU,WAmBJhB,IAlByB,EAAAH,EAAAC,OAAA,uDAC3BqX,GAAiB,GADU,KAE3BJ,EAF2B,WAAAlX,EAAA,MAEFqW,GAAWlW,IAFT,kCAG3BE,QAAQC,IAAI,cACZgX,GAAiB,GAJU,qCAMO,mBAAAtX,EAAAC,OAAA,uDAClCuX,GAAkB,IACZG,EAAwB9C,KAAS+C,KACjBlC,YAAYvV,EAAKwV,iBAHL,cAKhCqB,EALgC,WAAAhX,EAAA,MAKO2X,EAAsBf,YAL7B,kCAMhCvW,QAAQC,IAAI,8BANoB,kDAQhCD,QAAQC,IAAR,MARgC,QAUlCkX,GAAkB,GAVgB,yDAclCK,MAED,CAAC1X,IAEJgB,qBAAU,WAaJiP,GAZkB,mBAAApQ,EAAAC,OAAA,uDACpByX,GAAkB,IACZI,EAAkBjD,KAASkD,KACjBrC,YAAYvV,EAAKwV,iBAHb,cAKlBsB,EALkB,OAAAjX,EAAA,KAKe8X,EALf,WAAA9X,EAAA,MAKwCoQ,EAA8B4H,WALtE,oCAK+BpC,GAL/B,wFAMlBvV,QAAQC,IAAI,wBANM,kDAQlBD,QAAQC,IAAR,MARkB,QAUpBoX,GAAkB,GAVE,yDAapBO,KAED,CAAC7H,EAA+BjQ,IAEnC,IAAMuF,EAAWyR,GAAeE,GAAiBE,GAAkBE,EAEnE,OACI,kBAAC,IAAD,KAEE,kBAAC7L,EAAA,EAAD,CAASgG,UAAQ,EAAClI,UAAW,SAAU0B,UAAQ,GAC7C,kBAAC8M,EAAA,EAAD,CAAMC,MAAM,MAAMvG,UAAQ,GACxB,kBAACC,EAAA,EAAD,KACE,kBAACqG,EAAA,EAAKxP,KAAN,CAAW0P,QAAM,GAAjB,mCACoC,uBAAG3F,KAAM,0BAA2BnN,OAAQ,UAA5C,eAM1C,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAO+S,KAAK,sBACV,kBAACzM,EAAA,EAAD,CAASkG,MAAO,CAACO,QAAS,WAAYjH,UAAQ,GAC5C,kBAAC,GAAD,CACI6J,gBAAiB5E,EACjBlQ,KAAMA,MAKd,kBAAC,IAAD,CAAOkY,KAAK,KACV,kBAAC,EAAD,CACIlY,KAAMA,EACNiQ,8BAA+BA,EAC/BC,wBAAyBA,EACzB1P,gBAAiBA,EACjB+E,QAASA,MAMjB,kBAACkG,EAAA,EAAD,CAASC,OAAK,GACZ,kBAACgG,EAAA,EAAD,CAAWnI,UAAW,UACpB,kBAACjB,EAAA,EAAD,CAAM6P,YAAU,EAAClP,KAAM,QACrB,kBAACX,EAAA,EAAKC,KAAN,CAAWiC,GAAI,IAAK8H,KAAM,mDAAoDnN,OAAQ,UACpF,kBAACiT,EAAA,EAAD,CAAO1O,QAAQ,2CAA2C2O,QAAS,kBAACzN,EAAA,EAAD,CAAM3J,KAAM,cAEjF,kBAACqH,EAAA,EAAKC,KAAN,CAAWiC,GAAI,IAAK8H,KAAM,8BACxB,kBAAC8F,EAAA,EAAD,CAAO1O,QAAQ,sBAAsB2O,QAAS,kBAACzN,EAAA,EAAD,CAAM3J,KAAM,yBC3H1EqX,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,U,kBCLjDC,EAAOC,QAAU,CAeb/K,UAAW,qEACXI,SAAU,CACN,CACI,SAAW,EACX,aAAgB,UAChB,KAAQ,WACR,KAAQ,WAEZ,CACI,SAAW,EACX,aAAgB,UAChB,KAAQ,SACR,KAAQ,WAEZ,CACI,SAAW,EACX,aAAgB,UAChB,KAAQ,YACR,KAAQ,WAEZ,CACI,SAAW,EACX,aAAgB,UAChB,KAAQ,UACR,KAAQ,WAEZ,CACI,SAAW,EACX,aAAgB,UAChB,KAAQ,eACR,KAAQ,WAEZ,CACI,SAAW,EACX,aAAgB,UAChB,KAAQ,YACR,KAAQ,WAEZ,CACI,SAAW,EACX,aAAgB,UAChB,KAAQ,WACR,KAAQ,c,solLCzDpB,SAAS4K,EAAoBC,GAC5B,IAAIrT,EAAI,IAAI9C,MAAM,uBAAyBmW,EAAM,KAEjD,MADArT,EAAEiH,KAAO,mBACHjH,EAEPoT,EAAoB5H,KAAO,WAAa,MAAO,IAC/C4H,EAAoBnZ,QAAUmZ,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBE,GAAK,K,kBC6EzBJ,EAAOC,QArFiB,CAEpB,EAAK,CACG,CACI1X,KAAM,MACNc,QAAS,8CAEb,CACId,KAAM,OACNc,QAAS,8CAEb,CACId,KAAM,OACNc,QAAS,8CAEb,CACId,KAAM,QACNc,QAAS,+CAIrB,EAAK,CACD,CACId,KAAK,aACLc,QAAS,8CAEb,CACId,KAAM,OACNc,QAAS,8CAEb,CACId,KAAM,QACNc,QAAS,+CAIjB,GAAM,CACF,CACId,KAAK,aACLc,QAAS,8CAEb,CACId,KAAM,MACNc,QAAS,8CAEb,CACId,KAAM,OACNc,QAAS,8CAEb,CACId,KAAM,QACNc,QAAS,+CAIjB,EAAK,CACD,CACId,KAAK,aACLc,QAAS,8CAEb,CACId,KAAK,OACLc,QAAS,8CAEb,CACId,KAAM,QACNc,QAAS,+CAIjB,EAAK,CACD,CACId,KAAK,aACLc,QAAS,8CAEb,CACId,KAAK,OACLc,QAAS,8CAEb,CAAId,KAAM,QACNc,QAAS,iD","file":"static/js/main.2b89be8f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        resolve(web3)\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {Dropdown, Form} from 'semantic-ui-react'\n\n\nTokenSelector.propTypes = {\n    availableTokens: PropTypes.object.isRequired,\n    token: PropTypes.object,\n    selectToken: PropTypes.func.isRequired,\n}\n\nfunction TokenSelector({availableTokens, token, selectToken}) {\n\n    const [tokenOptions, setTokenOptions] = useState([])\n    const [selectedToken, setSelectedToken] = useState()\n\n    useEffect(() => {\n        if (token) {\n            console.log(\"new token via props: \" + token.name)\n            setSelectedToken(token)\n        } else {\n            console.log(\"Got empty token via props\")\n        }\n    }, [token])\n\n    useEffect(() => {\n        setTokenOptions(Object.entries(availableTokens).map(entry => (\n            {\n                value: entry[0],  // contract address\n                key:  entry[0],  // contract address\n                text: entry[1].name,\n            }\n        )))\n    }, [availableTokens])\n\n\n    function handleChange(ev, data) {\n        const selectedTokenEntry = availableTokens[data.value]\n        console.log(selectedTokenEntry)\n        selectToken(selectedTokenEntry)\n    }\n\n    return (\n        <Form.Field>\n            <label>What token do you want to use?</label>\n            <Dropdown\n                selection\n                placeholder={\"Select Token\"}\n                options={tokenOptions}\n                value={selectedToken ? selectedToken.address : undefined}\n                onChange={handleChange}\n            />\n            </Form.Field>\n    )\n}\n\nexport default TokenSelector","function isString(s) {\n  return (typeof s === 'string' || s instanceof String)\n}\n\nexport function toBaseUnit(value, decimals, BN) {\n  if (!isString(value)) {\n    throw new Error('Pass strings to prevent floating point precision issues.')\n  }\n  const ten = new BN(10);\n  const base = ten.pow(new BN(decimals));\n\n  // Is it negative?\n  let negative = (value.substring(0, 1) === '-');\n  if (negative) {\n    value = value.substring(1);\n  }\n\n  if (value === '.') { \n    throw new Error(\n    `Invalid value ${value} cannot be converted to`\n    + ` base unit with ${decimals} decimals.`); \n  }\n\n  // Split it into a whole and fractional part\n  let comps = value.split('.');\n  if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n  let whole = comps[0], fraction = comps[1];\n\n  if (!whole) { whole = '0'; }\n  if (!fraction) { fraction = '0'; }\n  if (fraction.length > decimals) { \n    throw new Error('Too many decimal places'); \n  }\n\n  while (fraction.length < decimals) {\n    fraction += '0';\n  }\n\n  whole = new BN(whole);\n  fraction = new BN(fraction);\n  let wei = (whole.mul(base)).add(fraction);\n\n  if (negative) {\n    wei = wei.neg();\n  }\n\n  return new BN(wei.toString(10), 10);\n}","import React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {toBaseUnit} from '../../erc20-decimals-conversion'\nimport {Input, Form} from 'semantic-ui-react'\nimport bnToDisplayString from '@triplespeeder/bn2string'\n\n/*\n    Tasks for this component:\n    - When user entered an amount, cross-check with erc20 contract if the current account\n      has enough balance!\n    - Convert user-friendly value provided through input component to raw token amount (decimals!)\n    - Provide entered raw token amount to parent component through props.setAmount()\n */\nconst AmountInputContainer = ({web3, setAmount, token, account}) => {\n    const [balance, setBalance] = useState({\n        precise: '',\n        rounded: '',\n        amount:web3.utils.toBN(0)\n    })\n    const [loadingBalance, setLoadingBalance] = useState(true)\n    const [error, setError] = useState(false)\n    const [localAmount, setLocalAmount] = useState('0')\n\n    // update available balance when token or account changes\n    useEffect(() => {\n        const getBalance = async () => {\n            setLoadingBalance(true)\n            let balance = await token.contractInstance.balanceOf(account)\n            let {precise, rounded} = bnToDisplayString({\n                value: balance,\n                decimals: token.decimals,\n                roundToDecimals: web3.utils.toBN(3)\n            })\n            setBalance({precise, rounded, amount: balance})\n            setLoadingBalance(false)\n        }\n        if (token && account) {\n            getBalance()\n        }\n    }, [token, account, web3])\n\n    // calculate token amount and notify parent on new value\n    useEffect(() => {\n        if (token) {\n            let amount = toBaseUnit(localAmount, token.decimals, web3.utils.BN)\n            console.log(`Converted ${localAmount} to ${amount.toString()}`)\n            setAmount(amount)\n        }\n    }, [token, localAmount, setAmount, web3])\n\n    const onchange = (ev) => {\n        setError(false)\n        let newValue = ev.target.value\n        console.log(`New value from input: ${newValue}`)\n        if (newValue < 0) {\n            newValue = 0\n        }\n        setLocalAmount(newValue)\n    }\n\n    let balanceInfo\n    if (!loadingBalance) {\n        balanceInfo = <span>(Available: {balance.rounded} {token.symbol})</span>\n    }\n\n    return (\n        <Form.Field error={error}>\n            <label>How much do you want to stream? {balanceInfo}</label>\n            <Input type='number' onChange={onchange} value={localAmount}/>\n        </Form.Field>\n    )\n}\n\nAmountInputContainer.propTypes = {\n    web3: PropTypes.object.isRequired,\n    setAmount: PropTypes.func.isRequired,\n    token: PropTypes.object,\n    account: PropTypes.string.isRequired,\n}\n\nexport default AmountInputContainer","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Form} from \"semantic-ui-react\"\n\nconst AddressInput = (props) => {\n    const {handleInput, loading, error, value} = props\n\n    const handleChange = async (e) => {\n        const input=e.target.value\n        handleInput(input)\n    }\n\n    return (\n        <Form.Field>\n            <label>Who is the recipient?</label>\n            <Form.Input\n                    name='address'\n                    placeholder='Address or ENS Name'\n                    error={error}\n                    loading={loading}\n                    onChange={handleChange}\n                    value={value}\n            />\n        </Form.Field>\n    )\n}\n\nAddressInput.propTypes = {\n    value: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.bool.isRequired,\n    handleInput: PropTypes.func.isRequired,\n}\n\nexport default AddressInput\n","import React, {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport AddressInput from './AddressInput'\n\nexport const addressInputStates = {\n    ADDRESS_RESOLVING: 'address_resolving', // valid ENS name entered, waiting for resolving\n    ADDRESS_VALID: 'address_valid', // got a valid address\n    ADDRESS_INVALID: 'address_invalid',\n}\n\nconst AddressInputContainer = ({setAddress, web3}) => {\n    const [addressInputState, setAddressInputState] = useState(addressInputStates.ADDRESS_INVALID)\n    const [input, setInput] = useState('')\n\n    // verify address input\n    useEffect(() => {\n        const handleInput = async() => {\n            // check for valid input (raw address and ENS name)\n            const validAddress = (/^(0x)?[0-9a-f]{40}$/i.test(input))\n            const validENSName = (/.*\\.eth$/i.test(input))\n            if (validENSName) {\n                // resolve entered ENS name\n                setAddressInputState(addressInputStates.ADDRESS_RESOLVING)\n                try {\n                    const resolvedAddress = await web3.eth.ens.getAddress(input)\n                    console.log(`Resolved ${input} to ${resolvedAddress}`)\n                    setAddressInputState(addressInputStates.ADDRESS_VALID)\n                    setAddress(resolvedAddress)\n                } catch (e) {\n                    console.log(\"Could not resolve \" + input)\n                    setAddressInputState(addressInputStates.ADDRESS_INVALID)\n                }\n            }\n            else if(validAddress) {\n                setAddress(input)\n                setAddressInputState(addressInputStates.ADDRESS_VALID)\n            }\n            else {\n                setAddressInputState(addressInputStates.ADDRESS_INVALID)\n            }\n        }\n        handleInput()\n    }, [input, setAddress, web3])\n\n    const error = (addressInputState === addressInputStates.ADDRESS_INVALID)\n    const loading = (addressInputState === addressInputStates.ADDRESS_RESOLVING)\n    return (\n        <AddressInput handleInput={setInput}\n                      error = {error}\n                      loading={loading}\n                      value={input}\n        />\n    )\n}\n\nAddressInputContainer.propTypes = {\n    setAddress: PropTypes.func.isRequired,\n    web3: PropTypes.object.isRequired,\n};\n\nexport default AddressInputContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Form, Input} from 'semantic-ui-react'\n\nconst DurationInput = (props) => {\n    const {handleDuration} = props\n    const secondsPerDay = 24*60*60\n\n    const handleChange = async (ev) => {\n        const newDays = ev.target.value\n        let seconds = parseInt(newDays)*secondsPerDay\n        if (seconds.isNaN) {\n            console.log(`newDays is NAN`)\n            seconds=0\n        }\n        console.log(`Days changed to ${newDays} (${seconds} seconds)`)\n        handleDuration(seconds)\n    }\n\n    return (\n        <Form.Field>\n            <label>For how long should the money be streamed?</label>\n            <Input\n                label={'days'}\n                labelPosition={'right'}\n                type={'number'}\n                onChange={handleChange}\n                min={1}\n                max={3650}\n            />\n        </Form.Field>\n    )\n}\n\nDurationInput.propTypes = {\n    handleDuration: PropTypes.func.isRequired,\n}\n\nexport default DurationInput\n","import React, {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Form, Grid, Message} from 'semantic-ui-react'\nimport TokenSelector from './TokenSelector'\nimport AmountInputContainer from './AmountInputContainer'\nimport AddressInputContainer from './AddressInputContainer'\nimport bnToDisplayString from '@triplespeeder/bn2string'\nimport dayjs from 'dayjs'\nimport DurationInput from './DurationInput'\n\n\nconst StreamForm = ({web3, createForm, cancel, availableTokens, account}) => {\n\n    const secondsPerDay = 24*60*60\n\n    const [token, setToken] = useState()\n    const [amount, setAmount] = useState(web3.utils.toBN(0))\n    const [recipient, setRecipient] = useState('')\n    const [durationSeconds, setDurationSeconds] = useState(0)\n    const [valid, setValid] = useState(false)\n    const [endTimestamp, setEndTimestamp] = useState()\n    const [dailyRate, setDailyRate] = useState({precise: '', rounded: '', amount:web3.utils.toBN(0)})\n\n    // calculate daily rate when token, amount or duration changes\n    useEffect(() => {\n        const calcRate = () => {\n            let amountPerSecond = amount.div(web3.utils.toBN(durationSeconds))\n            let amountPerDay = amountPerSecond.mul(web3.utils.toBN(secondsPerDay))\n            let {precise, rounded} = bnToDisplayString({\n                value: amountPerDay,\n                decimals: token.decimals,\n                roundToDecimals: web3.utils.toBN(3)\n            })\n            setDailyRate({precise, rounded, amount: amountPerDay})\n        }\n        if (token && token.decimals && amount.gt(0) && (durationSeconds)){\n            calcRate()\n        }\n    }, [amount, durationSeconds, token, web3, secondsPerDay])\n\n    // Simple form validation. Should be replaced with sth like react-formik later\n    useEffect(() => {\n        console.log(`Checking form valid: amount ${amount} recipient ${recipient} duration ${durationSeconds}`)\n        const formValid = (\n            (amount.gtn(0)) &&\n            (recipient !== '') &&\n            (durationSeconds >= secondsPerDay))\n        console.log(`Valid: ${formValid}`)\n        setValid(formValid)\n    }, [amount, recipient, durationSeconds, secondsPerDay])\n\n    // Calculate new duration and endTimestamp\n    const onDurationChange = (duration) => {\n        let timestamp = dayjs().unix() + duration\n        console.log(`New endTimestamp: ${timestamp}`)\n        setDurationSeconds(duration)\n        setEndTimestamp(timestamp)\n    }\n\n    const onSubmit = () => {\n        // Provide stream data to createStream function for next steps\n        createForm({\n            token,\n            amount,\n            recipient,\n            duration: web3.utils.toBN(durationSeconds)\n        })\n    }\n\n    const onTokenSelectorChange = (token) => {\n        console.log(`Token selected: ${token}`)\n        setToken(token)\n    }\n\n    let summaryContent\n    if (valid) {\n        summaryContent = <Message.List>\n            <Message.Item>Stream end: {dayjs.unix(endTimestamp).format('YYYY-MM-DD HH:mm')}</Message.Item>\n            <Message.Item>Daily rate: {dailyRate.rounded} {token.symbol}</Message.Item>\n        </Message.List>\n    } else {\n        summaryContent = <p>\n            Summary will update when all fields are filled.\n        </p>\n    }\n\n    return (\n        <Grid columns={2} divided>\n            <Grid.Row>\n                <Grid.Column width={8}>\n                    <Form size={'big'}>\n                        <TokenSelector\n                            availableTokens={availableTokens}\n                            token={token}\n                            selectToken={onTokenSelectorChange}/>\n                        <AmountInputContainer\n                            web3={web3}\n                            amount={amount}\n                            setAmount={setAmount}\n                            token={token}\n                            account={account}/>\n                        <AddressInputContainer\n                            setAddress={setRecipient}\n                            web3={web3}/>\n                        <DurationInput\n                            handleDuration={onDurationChange}/>\n                    </Form>\n                </Grid.Column>\n                <Grid.Column width={8} verticalAlign={'middle'}>\n                    <Message info size={'big'}>\n                        <Message.Header>Summary</Message.Header>\n                        {summaryContent}\n                    </Message>\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row textAlign={'justified'}>\n                <Grid.Column width={4}>\n                    <Button\n                        fluid\n                        content='Create Stream'\n                        disabled={!valid}\n                        positive\n                        size={'big'}\n                        onClick={onSubmit}\n                    />\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Button\n                        fluid\n                        content='Cancel'\n                        negative\n                        size={'big'}\n                        onClick={cancel}\n                    />\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nStreamForm.propTypes = {\n    web3: PropTypes.object.isRequired,\n    createForm: PropTypes.func.isRequired,\n    cancel: PropTypes.func.isRequired,\n    availableTokens: PropTypes.object.isRequired,\n    account: PropTypes.string.isRequired,\n}\n\nexport default StreamForm","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Grid, Icon, Message, Segment, Step} from 'semantic-ui-react'\nimport {createFormStates} from './CreateFormContainer'\nimport {Link} from 'react-router-dom'\n\nCreateForm.propTypes = {\n    formState: PropTypes.number.isRequired,\n    streamId: PropTypes.number,\n    retry: PropTypes.func.isRequired,\n    cancel: PropTypes.func.isRequired,\n    error: PropTypes.string,\n    closeModal: PropTypes.func.isRequired,\n}\n\nfunction CreateForm({formState, streamId, retry, cancel, closeModal, error}) {\n\n    let message\n    if (formState === createFormStates.CREATE_FORM_STATE_FINISHED) {\n        message = <Message success size={'big'}>\n            <Message.Content>\n                <Message.Header>Complete</Message.Header>\n                <p>Your heritage stream is now created.</p>\n                <p>The streamID is <em>{streamId}.</em></p>\n                <Button as={Link} to={`/streams/${streamId}`} positive size={'big'}>View stream</Button>\n            </Message.Content>\n        </Message>\n    } else if (error) {\n        message = <Message icon error size={'big'}>\n            <Icon name='exclamation'/>\n            <Message.Content>\n                <Message.Header>An error occured</Message.Header>\n                <p>{error}</p>\n                <Button.Group fluid size={'big'}>\n                    <Button positive onClick={retry}>Retry</Button>\n                    <Button.Or />\n                    <Button negative onClick={cancel}>Cancel</Button>\n                </Button.Group>\n            </Message.Content>\n        </Message>\n    } else if (formState === createFormStates.CREATE_FORM_STATE_WAITING_ALLOWANCE) {\n        message = <Message icon info size={'big'}>\n            <Icon name='info'/>\n            <Message.Content>\n                <Message.Header>Waiting for approval</Message.Header>\n                Please approve transaction\n            </Message.Content>\n        </Message>\n    }\n    else {\n        message = <Message icon info size={'big'}>\n            <Icon name='info'/>\n            <Message.Content>\n                <Message.Header>Just one second</Message.Header>\n                Setting up stream...\n            </Message.Content>\n        </Message>\n    }\n    return (\n        <Grid columns={2}>\n            <Grid.Row>\n                <Grid.Column>\n                    <Step.Group vertical fluid size='big'>\n                        <Step\n                            active={formState === createFormStates.CREATE_FORM_STATE_CHECKING_BALANCE}\n                            completed={formState > createFormStates.CREATE_FORM_STATE_CHECKING_BALANCE}\n                        >\n                            <Icon name='dollar'/>\n                            <Step.Content>\n                                <Step.Title>Balance</Step.Title>\n                            </Step.Content>\n                        </Step>\n                        <Step\n                            active={\n                                (formState === createFormStates.CREATE_FORM_STATE_CHECKING_ALLOWANCE)||\n                                (formState === createFormStates.CREATE_FORM_STATE_WAITING_ALLOWANCE)\n                            }\n                            completed={formState > createFormStates.CREATE_FORM_STATE_WAITING_ALLOWANCE}\n                        >\n                            <Icon name={(formState === createFormStates.CREATE_FORM_STATE_WAITING_ALLOWANCE)?\n                                'spinner loading':'ethereum'}\n                            />\n                            <Step.Content>\n                                <Step.Title>Allowance</Step.Title>\n                                {(formState === createFormStates.CREATE_FORM_STATE_WAITING_ALLOWANCE)&&\n                                <Step.Description>Waiting for transaction to complete...</Step.Description>}\n                            </Step.Content>\n                        </Step>\n                        <Step\n                            active={formState === createFormStates.CREATE_FORM_STATE_WAITING_STREAM}\n                            completed={formState > createFormStates.CREATE_FORM_STATE_WAITING_STREAM}\n                        >\n                            <Icon name={(formState === createFormStates.CREATE_FORM_STATE_WAITING_STREAM)?\n                                'spinner loading':'ethereum'\n                            }/>\n                            <Step.Content>\n                                <Step.Title>Stream creation</Step.Title>\n                                {(formState === createFormStates.CREATE_FORM_STATE_WAITING_STREAM) &&\n                                <Step.Description>Waiting for transaction to complete...</Step.Description>}\n                            </Step.Content>\n                        </Step>\n                    </Step.Group>\n                </Grid.Column>\n                <Grid.Column verticalAlign='middle'>\n                    <Segment basic>\n                        {message}\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nexport default CreateForm","import React, {useCallback, useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport dayjs from 'dayjs'\nimport CreateForm from './CreateForm'\nimport bnToDisplayString from '@triplespeeder/bn2string'\nimport {topicHash, eventABI} from '../../utils/streamEventsABI'\n\nexport const createFormStates = {\n    CREATE_FORM_STATE_CHECKING_BALANCE: 10,\n    CREATE_FORM_STATE_CHECKING_ALLOWANCE: 20,\n    CREATE_FORM_STATE_WAITING_ALLOWANCE: 30,\n    CREATE_FORM_STATE_WAITING_STREAM: 40,\n    CREATE_FORM_STATE_FINISHED: 50\n}\n\nconst CreateFormContainer = ({web3, sender, token, amount, sealedSablierInstance, recipient, duration, cancel, closeModal}) => {\n\n    const [streamId, setStreamId] = useState(0)\n    const [error, setError] = useState('')\n    const [formState, setFormState] = useState(createFormStates.CREATE_FORM_STATE_CHECKING_BALANCE)\n\n    // Transform duration to startTime and stopTime\n    const calcTimeStamps = useCallback(() => {\n        // add 5 minutes offset to startTime to make sure stream is fully created before startTime reached\n        let startTime = web3.utils.toBN(dayjs().unix() + (5*60))\n        return {\n            startTime,\n            stopTime: startTime.add(duration)\n        }\n    }, [duration, web3.utils]);\n\n    // Sablier requires amount to be multiple of duration. Decrease effective amount accordingly\n    const calcFinalAmount = useCallback(() => {\n        let remainder = amount.mod(duration)\n        return amount.sub(remainder)\n    }, [amount, duration]);\n\n    // simplified state machine to track creation process.\n    // I'm sure there exists a hooks-based statemachine library somewhere I could use instead :)\n    useEffect(() => {\n        const checkBalance = async () => {\n            console.log('Checking Balance')\n            setError('')\n            let balance\n            try {\n                balance = await token.contractInstance.balanceOf(sender)\n            } catch(error) {\n                console.log(\"Error getting balance\")\n                setError(`Error getting balance: ${error.code} - ${error.message}`)\n                return\n            }\n            if (balance.gte(amount)){\n                setFormState(createFormStates.CREATE_FORM_STATE_CHECKING_ALLOWANCE)\n            } else {\n                const amountDisplay = bnToDisplayString({\n                    value: amount,\n                    decimals: token.decimals,\n                    roundToDecimals: web3.utils.toBN(2)\n                })\n                const balanceDisplay = bnToDisplayString({\n                    value: balance,\n                    decimals: token.decimals,\n                    roundToDecimals: web3.utils.toBN(2)\n                })\n                setError(`Not enough funds. Required: ${amountDisplay.rounded} ${token.symbol}. Available: ${balanceDisplay.rounded} ${token.symbol}.`)\n            }\n        }\n        const checkAllowance = async() => {\n            console.log(\"checking allowance\")\n            setError('')\n            let allowance = await token.contractInstance.allowance(sender, sealedSablierInstance.address)\n            if (allowance.gte(amount)){\n                setFormState(createFormStates.CREATE_FORM_STATE_WAITING_STREAM)\n            } else {\n                const amountDisplay = bnToDisplayString({\n                    value: amount,\n                    decimals: token.decimals,\n                    roundToDecimals: web3.utils.toBN(2)\n                })\n                const allowanceDisplay = bnToDisplayString({\n                    value: allowance,\n                    decimals: token.decimals,\n                    roundToDecimals: web3.utils.toBN(2)\n                })\n                setError(`Not enough allowance. Required: ${amountDisplay.rounded} ${token.symbol}. Available: ${allowanceDisplay.rounded} ${token.symbol}`)\n                setFormState(createFormStates.CREATE_FORM_STATE_WAITING_ALLOWANCE)\n            }\n        }\n        const setAllowance = async () => {\n            console.log(`Setting allowance of ${amount.toString()}`)\n            setError('')\n            try {\n                await token.contractInstance.approve(sealedSablierInstance.address, amount.toString(), {from: sender})\n                setFormState(createFormStates.CREATE_FORM_STATE_WAITING_STREAM)\n            } catch(error) {\n                console.log(\"Error while approving\")\n                setError(`Error getting balance: ${error.code} - ${error.message}`)\n            }\n        }\n        const createStream = async() => {\n            console.log(`Creating stream`)\n            setError('')\n            const finalAmount = calcFinalAmount()\n            console.log(`Effective amount: ${finalAmount} (requested: ${amount})`)\n            const timeStamps = calcTimeStamps()\n            try {\n                let result = await sealedSablierInstance.createStream(recipient, finalAmount.toString(), token.contractInstance.address, timeStamps.startTime.toString(), timeStamps.stopTime.toString(), {from: sender})\n                // Get CreateStream event to verify results. Since the event is not created by SealedSablier, but by the\n                // external \"Sablier\" contract, we have to manually look for it by topicHash in tx.rawLogs\n                let event = result.receipt.rawLogs.find(log => {\n                    return (log.topics[0] === topicHash)\n                });\n                // skip event.topics[0] while decoding as it contains the topicHash\n                let decoded = web3.eth.abi.decodeLog(eventABI, event.data, event.topics.slice(1))\n                console.log(decoded)\n                setStreamId(parseInt(decoded.streamId))\n                setFormState(createFormStates.CREATE_FORM_STATE_FINISHED)\n            } catch(error){\n                console.log(\"Error while creating stream\")\n                setError(`Error while creating stream: ${error.code} - ${error.message}`)\n            }\n        }\n        console.log(`CreateForm web3 version: ${web3.version}`)\n        switch(formState) {\n            case createFormStates.CREATE_FORM_STATE_CHECKING_BALANCE:\n                checkBalance()\n                break\n            case createFormStates.CREATE_FORM_STATE_CHECKING_ALLOWANCE:\n                checkAllowance()\n                break\n            case createFormStates.CREATE_FORM_STATE_WAITING_ALLOWANCE:\n                setAllowance()\n                break\n            case createFormStates.CREATE_FORM_STATE_WAITING_STREAM:\n                createStream()\n                break\n            case createFormStates.CREATE_FORM_STATE_FINISHED:\n                break\n            default:\n                console.log(`Unhandled state ${formState}`)\n        }\n    }, [\n        amount,\n        calcFinalAmount,\n        calcTimeStamps,\n        formState,\n        recipient,\n        sealedSablierInstance,\n        sender,\n        token.contractInstance,\n        token.decimals,\n        token.symbol,\n        web3.eth.abi,\n        web3.utils,\n        web3.version\n    ])\n\n    const onRetry = () => {\n        // Set initial state to restart stream creation process\n        setFormState(createFormStates.CREATE_FORM_STATE_CHECKING_BALANCE)\n    }\n\n    return (\n        <CreateForm\n            formState={formState}\n            retry={onRetry}\n            streamId={streamId}\n            error={error}\n            cancel={cancel}\n            closeModal={closeModal}\n        />\n    )\n}\n\nCreateFormContainer.propTypes = {\n    amount: PropTypes.object.isRequired,\n    token: PropTypes.object.isRequired,\n    web3: PropTypes.object.isRequired,\n    sealedSablierInstance: PropTypes.object.isRequired,\n    sender: PropTypes.string.isRequired,\n    recipient: PropTypes.string.isRequired,\n    duration: PropTypes.object.isRequired,\n    cancel: PropTypes.func.isRequired,\n    closeModal: PropTypes.func.isRequired,\n}\n\nexport default CreateFormContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, List, Message} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\n\nStreamList.propTypes = {\n    streams: PropTypes.array.isRequired,\n    incoming: PropTypes.bool.isRequired,\n}\n\nfunction StreamList({streams, incoming}) {\n    if (incoming) {\n        if (streams.length > 0) {\n            // got incoming streams\n            let listItems = streams.map((stream) => (\n                <List.Item key={stream.streamID}>\n                    <Button as={Link} to={`/streams/${stream.streamID}`}>{stream.streamID}</Button> from {stream.sender}\n                </List.Item>\n            ))\n            return <List>{listItems}</List>\n        } else {\n            // no incoming streams\n            return <Message info size={'big'}>\n                <Message.Content>\n                    You don't have any incoming heritage streams.\n                </Message.Content>\n            </Message>\n        }\n    } else {\n        if (streams.length > 0) {\n            // got outgoing streams\n            let listItems = streams.map((stream) => (\n                <List.Item key={stream.streamID}>\n                    <Button as={Link} to={`/streams/${stream.streamID}`}>{stream.streamID}</Button> to {stream.recipient}\n                </List.Item>\n            ))\n            return <List>{listItems}</List>\n        } else {\n            // no outgoing streams\n            return <Message info size={'big'}>\n                <Message.Content>\n                    You don't have any outgoing heritage streams.\n                </Message.Content>\n            </Message>\n        }\n    }\n}\n\nexport default StreamList","import React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Header, Icon, Message} from 'semantic-ui-react'\nimport StreamList from './StreamList'\n\n\nStreamListController.propTypes = {\n    account: PropTypes.string.isRequired,\n    sealedSablierInstance: PropTypes.object.isRequired,\n    goBack: PropTypes.func.isRequired,\n}\n\nfunction StreamListController({account, sealedSablierInstance, goBack}) {\n\n    const [loadingEvents, setLoadingEvents] = useState(true)\n    const [incomingStreams, setIncomingStreams] = useState([])\n    const [outgoingStreams, setOutgoingStreams] = useState([])\n\n    useEffect(() => {\n        const loadEvents = async () => {\n            setLoadingEvents(true)\n            let [incomingEvents, outgoingEvents] = await Promise.all([\n                sealedSablierInstance.getPastEvents('CreateSealedStream', {\n                    fromBlock: 1,\n                    filter: {\n                        recipient: account\n                    }\n                }),\n                sealedSablierInstance.getPastEvents('CreateSealedStream', {\n                    fromBlock: 1,\n                    filter: {\n                        sender: account\n                    }\n                })\n            ])\n\n            console.log(`Incoming: ${incomingEvents}`)\n            console.log(`Outgoing: ${outgoingEvents}`)\n            let incomingArray = incomingEvents.map(event => (\n                {\n                    streamID: event.returnValues.streamId,\n                    sender: event.returnValues.sender,\n                    recipient: event.returnValues.recipient,\n                    deposit: event.returnValues.deposit,\n                    startTime: event.returnValues.startTime,\n                    stopTime: event.returnValues.stopTime,\n                    tokenAddress: event.returnValues.tokenAddress\n                }\n            ))\n            setIncomingStreams(incomingArray)\n            let outgoingArray = outgoingEvents.map(event => (\n                {\n                    streamID: event.returnValues.streamId,\n                    sender: event.returnValues.sender,\n                    recipient: event.returnValues.recipient,\n                    deposit: event.returnValues.deposit,\n                    startTime: event.returnValues.startTime,\n                    stopTime: event.returnValues.stopTime,\n                    tokenAddress: event.returnValues.tokenAddress\n                }\n            ))\n            setOutgoingStreams(outgoingArray)\n            setLoadingEvents(false)\n        }\n        loadEvents()\n    }, [sealedSablierInstance, account])\n\n    if (loadingEvents) {\n        return <Message icon info size={'big'}>\n            <Icon loading name='spinner'/>\n            <Message.Content>\n                <Message.Header>Loading streams</Message.Header>\n                Please wait while loading your streams\n            </Message.Content>\n        </Message>\n    }\n\n    return (\n        <React.Fragment>\n            <Header as='h2'>Incoming streams</Header>\n            <StreamList streams={incomingStreams} incoming={true}/>\n            <Header as='h2'>Outgoing streams</Header>\n            <StreamList streams={outgoingStreams} incoming={false}/>\n            <Button onClick={goBack}>Back</Button>\n        </React.Fragment>\n    )\n}\n\nexport default StreamListController","import React, {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Icon, Message, Modal} from 'semantic-ui-react'\nimport StreamForm from './PrepareForm/StreamForm'\nimport CreateFormContainer from './CreateForm/CreateFormContainer'\nimport StreamListController from './StreamList/StreamListController'\n\n\nconst StreamModal = ({web3, open, handleClose, initialPhase, sealedSablierContractInstance, ERC1620ContractInstance, availableTokens}) => {\n    const [account, setAccount] = useState('')\n    const [streamOptions, setStreamOptions] = useState({})\n    const [phase, setPhase] = useState(initialPhase)\n    const [loadingAccount, setLoadingAccount] = useState(true)\n\n    useEffect(() => {\n        const obtainAccount = async () => {\n            setLoadingAccount(true)\n            try {\n                // Request account access\n                await window.ethereum.enable();\n                // Acccounts now exposed\n                const accounts = await web3.eth.getAccounts();\n                setAccount(accounts[0])\n                console.log(\"Got account\")\n            } catch (error) {\n                console.log('User rejected connection request')\n            }\n            setLoadingAccount(false)\n        }\n        if(open) {\n            obtainAccount()\n        }\n    }, [open, web3]) // should actually depend on network(ID) instead of web3 obj\n\n    const onCreateStream = (streamOptions) => {\n        console.log(\"Got streamOptions\")\n        console.log(streamOptions)\n        setStreamOptions(streamOptions)\n        setPhase(2)\n    }\n\n    let content, headline\n\n    // Got account?\n    if (account === '') {\n        if (loadingAccount) {\n            console.log(\"Still waiting for account...\")\n            content = <Message info icon>\n                <Icon name={'spinner'} loading/>\n                <Message.Content>\n                    <Message.Header>Connect wallet</Message.Header>\n                    Please approve connection to your account to continue\n                </Message.Content>\n            </Message>\n        } else {\n            content = <Message error icon>\n                <Icon name={'exclamation'}/>\n                <Message.Content>\n                    <Message.Header>Could not connect account</Message.Header>\n                    <p>You need to approve the account connection in order to setup a stream.</p>\n                    <Button color={'black'} onClick={handleClose}>Okay</Button>\n                </Message.Content>\n            </Message>\n\n        }\n    }\n    // Got SealedSablier contract?\n    else if (!sealedSablierContractInstance) {\n        content = <Message error icon>\n            <Icon name={'exclamation'}/>\n            <Message.Content>\n                <Message.Header>Could not load SealedSablier contract</Message.Header>\n                <p>\n                    Are you running on a local dev chain? Make sure to execute <em>truffle\n                    migrate</em> to deploy instances of Sablier and SealedSablier contracts.\n                </p>\n                <Button color={'black'} onClick={handleClose}>Okay</Button>\n            </Message.Content>\n        </Message>\n    }\n    // Got ERC1620 contract?\n    else if (!ERC1620ContractInstance) {\n        // loading failed :-(\n        content = <Message error icon>\n            <Icon name={'exclamation'}/>\n            <Message.Content>\n                <Message.Header>Could not load Sablier contract</Message.Header>\n                <p>\n                    Are you running on a local dev chain? Make sure to execute <em>truffle\n                    migrate</em> to deploy Sablier ERC1620 contracts.\n                </p>\n                <Button color={'black'} onClick={handleClose}>Okay</Button>\n            </Message.Content>\n        </Message>\n    }\n    // Got Token contract(s)?\n    else if (!Object.keys(availableTokens).length) {\n        content = <Message error icon>\n            <Icon name={'exclamation'}/>\n            <Message.Content>\n                <Message.Header>No token contracts available</Message.Header>\n                <p>Are you running on a local dev chain? Make sure to execute <em>truffle\n                    migrate</em> to deploy an ERC20 Mock contract.</p>\n                <Button color={'black'} onClick={handleClose}>Okay</Button>\n            </Message.Content>\n        </Message>\n    }\n    else if (phase===1) {\n        headline = 'Set up your heritage stream'\n        content = <StreamForm\n            web3={web3}\n            createForm={onCreateStream}\n            cancel={handleClose}\n            availableTokens={availableTokens}\n            account={account}\n        />\n    }\n    else if (phase === 2) {\n        headline = 'Set up your heritage stream'\n        content = <CreateFormContainer\n            web3={web3}\n            token={streamOptions.token}\n            sender={account}\n            sealedSablierInstance={sealedSablierContractInstance}\n            amount={streamOptions.amount}\n            recipient={streamOptions.recipient}\n            duration={streamOptions.duration}\n            cancel={()=>{setPhase(1)}}\n            closeModal={handleClose}\n        />\n    }\n    else if (phase === 3) {\n        headline = 'Your heritage streams'\n        content = <StreamListController\n            account={account}\n            web3={web3}\n            sealedSablierInstance={sealedSablierContractInstance}\n            goBack={handleClose}\n        />\n    }\n\n    return (\n        <Modal\n            open={open}\n            size={'large'}\n        >\n            <Modal.Header>\n                {headline}\n            </Modal.Header>\n            <Modal.Content>\n                {content}\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nStreamModal.propTypes = {\n    web3: PropTypes.object.isRequired,\n    open: PropTypes.bool.isRequired,\n    handleClose: PropTypes.func.isRequired,\n    initialPhase: PropTypes.number,\n    sealedSablierContractInstance: PropTypes.object,\n    ERC1620ContractInstance: PropTypes.object,\n    availableTokens: PropTypes.object,\n}\n\n\nexport default StreamModal","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Container, Grid, Header, Icon, Message, Segment} from 'semantic-ui-react'\nimport StreamModal from './Components/StreamModal'\n\nMainPage.propTypes = {\n    web3: PropTypes.object,\n    sealedSablierContractInstance: PropTypes.object,\n    ERC1620ContractInstance: PropTypes.object,\n    availableTokens: PropTypes.object,\n    loading: PropTypes.bool.isRequired,\n}\n\nfunction MainPage({web3, sealedSablierContractInstance, ERC1620ContractInstance, availableTokens, loading}) {\n\n    const [open, setOpen] = useState(0)\n\n    const ready = (web3 && sealedSablierContractInstance && ERC1620ContractInstance && Object.keys(availableTokens).length)\n\n    if ((!loading) && (!ready)) {\n        console.log(\"Something went wrong while loading contracts\")\n        alert(\"Please use local dev environment, Ropsten, Rinkeby, Goerli or Kovan. MainNet is not supported.\")\n    }\n\n    const handleClose = () => {\n        setOpen(0)\n    }\n\n    let Actions\n    if (ready) {\n        Actions =<React.Fragment>\n            <Button primary size='massive' onClick={()=>{setOpen(1)}}>\n                Create new stream\n                <Icon name='right arrow' />\n            </Button>\n            <Button primary size='massive' onClick={()=>{setOpen(3)}}>\n                Show your streams\n                <Icon name='right arrow' />\n            </Button>\n        </React.Fragment>\n    } else {\n        Actions = <Message icon info size={'big'}>\n            <Icon loading name='spinner'/>\n            <Message.Content>\n                <Message.Header>Initializing backend</Message.Header>\n                Please wait while loading contracts\n            </Message.Content>\n        </Message>\n    }\n\n    const HomepageHeading =\n        <Segment inverted textAlign={'center'} vertical>\n            <Container\n                text\n                style={{marginBottom: '2em'}}\n            >\n                <Header\n                    as='h1'\n                    content='The web3 way of inheritance'\n                    inverted\n                    style={{\n                        fontSize: '4em',\n                        fontWeight: 'normal',\n                        marginTop: '3em',\n                    }}\n                />\n                <Header\n                    as='h2'\n                    content='secure. unstoppable. responsible.'\n                    subheader='Pass your heritage via Sablier streams'\n                    inverted\n                    style={{\n                        fontSize: '1.7em',\n                        fontWeight: 'normal',\n                        marginTop: '1.5em',\n                    }}\n                />\n                {Actions}\n            </Container>\n        </Segment>\n\n    const Explainer =\n        <Segment style={{ padding: '8em 0em' }} vertical>\n            <Grid container stackable verticalAlign='middle'>\n                <Grid.Row>\n                    <Grid.Column width={8}>\n                        <Header as='h3' style={{ fontSize: '2em' }}>\n                            Are you hesitating to inherit all your wealth at once?\n                        </Header>\n                        <p style={{ fontSize: '1.33em' }}>\n                            Do you prefer to make your heritage a constant stream of income for an\n                            extended period of time? Setting this up is a cumbersome process involving lawyers,\n                            banks and notaries. And they all will request a substantial amount of money\n                            for their service!\n                        </p>\n                        <Header as='h3' style={{ fontSize: '2em' }}>\n                            Stop looking!\n                        </Header>\n                        <p style={{ fontSize: '1.33em' }}>\n                            Now you can set up a streaming inheritance in less than 2\n                            minutes. No paperwork, no KYC. Secured by Sablier on the Ethereum Blockchain.\n                        </p>\n                    </Grid.Column>\n                    <Grid.Column floated='right' width={7}>\n                        <Header as='h3' style={{ fontSize: '2em' }}>\n                            How does it work?\n                        </Header>\n                        <p style={{ fontSize: '1.33em' }}>\n                            Web3Inheritance is a proxy for creating Sablier streams. The difference to a\n                            normal Sablier stream is that nobody has control on the stream once it is created.\n                            Effectively the money is locked into the Sablier stream, with the owner being the\n                            SealedSablier smart contract.</p>\n                        <p style={{ fontSize: '1.33em' }}>This means that only the receiver can interact\n                            with the stream. Once set up, there is no way for you to modify or cancel the\n                            heritage stream - Your decision is final.\n                        </p>\n                        <Header as='h3' style={{ fontSize: '2em' }}>\n                            More information\n                        </Header>\n                        <p style={{ fontSize: '1.33em' }}>\n                            For more information about Sablier streams check out the official FAQ page\n                            at <a href={'https://faq.sablier.finance'} target={'_blank'}>faq.sablier.finance</a>.\n                        </p>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n\n    return (\n        <React.Fragment>\n            {HomepageHeading}\n            {Explainer}\n            {open && <StreamModal\n                open={true}\n                handleClose={handleClose}\n                web3={web3}\n                initialPhase={open}\n                sealedSablierContractInstance={sealedSablierContractInstance}\n                ERC1620ContractInstance={ERC1620ContractInstance}\n                availableTokens={availableTokens}\n            />}\n        </React.Fragment>\n    )\n}\n\nexport default MainPage\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport {Progress} from 'semantic-ui-react'\ndayjs.extend(relativeTime)\n\nStreamProgress.propTypes = {\n    startTimestamp: PropTypes.number.isRequired,\n    stopTimestamp: PropTypes.number.isRequired,\n}\n\nfunction StreamProgress({startTimestamp, stopTimestamp}) {\n    let startTime = dayjs.unix(startTimestamp)\n    let stopTime = dayjs.unix(stopTimestamp)\n    let now = dayjs()\n    let durationSeconds = stopTimestamp - startTimestamp\n    let started = startTime.isBefore(now)\n    let stopped = stopTime.isBefore(now)\n    let active = (started && (!stopped))\n    let progressPercent\n    let timeFormat = 'YYYY-MM-DD HH:mm'\n\n    let description\n    if (!started) {\n        description = `Stream will start ${startTime.format(timeFormat)}`\n        progressPercent = 0\n    }else if (stopped) {\n        description = `Stream has ended ${stopTime.format(timeFormat)}`\n        progressPercent = 100\n    } else if (active) {\n        description = `Stream will end in ${now.to(stopTime)}`\n        let elapsedSeconds = now.unix() - startTimestamp\n        progressPercent = Math.round(elapsedSeconds*100/(durationSeconds))\n    }\n\n    return (\n        <Progress\n            size={'big'}\n            percent={progressPercent}\n            progress\n            active={active}\n            color={'teal'}\n        >\n            {description}\n        </Progress>\n    )\n}\n\nexport default StreamProgress","import React from 'react'\nimport PropTypes from 'prop-types'\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport {Progress} from 'semantic-ui-react'\nimport bnToDisplayString from '@triplespeeder/bn2string'\ndayjs.extend(relativeTime)\n\nBalanceProgress.propTypes = {\n    BN: PropTypes.func.isRequired,\n    deposit: PropTypes.object.isRequired,\n    remainingBalance: PropTypes.object.isRequired,\n    recipientBalance: PropTypes.object.isRequired,\n    token: PropTypes.object.isRequired,\n}\n\nfunction BalanceProgress({BN, deposit, remainingBalance, recipientBalance, token}) {\n    let balancePercent\n    let withDrawnAmount = deposit.sub(remainingBalance)\n    if (withDrawnAmount.isZero()) {\n        balancePercent = new BN(0)\n    } else if (withDrawnAmount.eq(deposit)) {\n        balancePercent = new BN(100)\n    } else {\n        balancePercent = withDrawnAmount.muln(100).div(deposit)\n    }\n\n    const lockedBalanceDisplay = bnToDisplayString({\n        value: remainingBalance.sub(recipientBalance),\n        decimals: token.decimals,\n        roundToDecimals: new BN(2)\n    })\n    const recipientBalanceDisplay = bnToDisplayString({\n        value: recipientBalance,\n        decimals: token.decimals,\n        roundToDecimals: new BN(2)\n    })\n    let description = `${recipientBalanceDisplay.rounded} ${token.symbol} available for withdraw, ${lockedBalanceDisplay.rounded} ${token.symbol} pending`\n\n    return (\n        <Progress size={'big'} percent={balancePercent.toNumber()} progress color={'blue'}>\n            {description}\n        </Progress>    )\n}\n\nexport default BalanceProgress","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Icon, Message, Modal} from 'semantic-ui-react'\nimport bnToDisplayString from '@triplespeeder/bn2string'\nimport {Link} from 'react-router-dom'\nimport StreamProgress from './StreamProgress'\nimport BalanceProgress from './BalanceProgress'\n\nStreamDetails.propTypes = {\n    loading: PropTypes.bool.isRequired,\n    streamId: PropTypes.string.isRequired,\n    withdrawing: PropTypes.bool.isRequired,\n    withdraw: PropTypes.func.isRequired,\n    account: PropTypes.string.isRequired,\n    web3: PropTypes.object,\n    streamDetails: PropTypes.object,\n    token: PropTypes.object,\n}\n\nfunction StreamDetails({loading, streamId, streamDetails, web3, withdraw, withdrawing, account, token}) {\n\n    let modalContent\n    if (loading) {\n        modalContent = <Message icon info size={'big'}>\n            <Icon loading name={'spinner'}/>\n            <Message.Content>\n                <Message.Header>Loading stream</Message.Header>\n                <p>Please wait while loading streamdetails...</p>\n            </Message.Content>\n        </Message>\n    } else if (!streamDetails) {\n        modalContent = <Message icon error size={'big'}>\n            <Icon name={'exclamation'}/>\n            <Message.Content>\n                <Message.Header>Error loading stream details</Message.Header>\n                <p>Could not load stream details.</p>\n            </Message.Content>\n        </Message>\n    } else {\n        const {deposit, startTime, stopTime, remainingBalance, recipientBalance} = streamDetails\n\n        let withdrawButton\n        if (withdrawing) {\n            withdrawButton = <Button positive icon size={'big'} disabled>\n                <Icon loading name={'spinner'}/>\n                Withdrawal confirming...\n            </Button>\n        } else {\n            let {rounded} = bnToDisplayString({\n                value: recipientBalance,\n                decimals: token.decimals,\n                roundToDecimals: web3.utils.toBN(2)\n            })\n            withdrawButton = <Button positive size={'big'} onClick={withdraw}>Withdraw {rounded} {token.symbol}</Button>\n        }\n        const isRecipient = (account === streamDetails.recipient)\n\n        modalContent = <React.Fragment>\n            <StreamProgress\n                startTimestamp={startTime.toNumber()}\n                stopTimestamp={stopTime.toNumber()}\n            />\n            <BalanceProgress\n                recipientBalance={recipientBalance}\n                token={token}\n                BN={web3.utils.BN}\n                remainingBalance={remainingBalance}\n                deposit={deposit}\n            />\n            {isRecipient && <p>{withdrawButton}</p>}\n        </React.Fragment>\n    }\n\n    return <Modal open={true}>\n        <Modal.Header>Stream {streamId} details</Modal.Header>\n        <Modal.Content>\n            {modalContent}\n        </Modal.Content>\n        <Modal.Actions>\n            <Button as={Link} to={'/'}>\n                <Icon name='checkmark' /> Close\n            </Button>\n        </Modal.Actions>\n    </Modal>\n\n}\n\nexport default StreamDetails\n","import React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    useParams\n} from \"react-router-dom\";\nimport StreamDetails from './StreamDetails'\nconst contract = require(\"@truffle/contract\");\nconst ERC20Data = require(\"../../contracts/ERC20Detailed\")\n\nStreamDetailsContainer.propTypes = {\n    ERC1620Instance: PropTypes.object,\n    web3: PropTypes.object,\n}\n\nfunction StreamDetailsContainer({ERC1620Instance, web3}) {\n    const { streamId } = useParams();   // from react router\n    const [loadingDetails, setLoadingDetails] = useState(true)\n    const [streamDetails, setStreamDetails] = useState()\n    const [withDrawing, setWithDrawing] = useState(false)\n    const [account, setAccount] = useState('')\n    const [token, setToken] = useState()\n\n    useEffect(() => {\n        const loadStreamDetails = async () => {\n            setLoadingDetails(true)\n            console.log(`Loading details for streamId ${streamId}...`)\n            try {\n                // Get account\n                await window.ethereum.enable();\n                const accounts = await web3.eth.getAccounts();\n                setAccount(accounts[0])\n\n                // get streamDetails\n                let streamDetails = await ERC1620Instance.getStream(streamId)\n                console.log(streamDetails)\n\n                // get token contract\n                let erc20Contract = contract(ERC20Data)\n                erc20Contract.setProvider(web3.currentProvider)\n                let contractInstance = await erc20Contract.at(streamDetails.token)\n                let name = await contractInstance.name()\n                let symbol = await contractInstance.symbol()\n                let decimals = await contractInstance.decimals()\n                console.log(`Token: ${name} - ${symbol} - ${decimals.toString()}`)\n                setToken({\n                    name,\n                    symbol,\n                    decimals,\n                    contractInstance,\n                })\n\n                // get recipient balance\n                let recipientBalance = await ERC1620Instance.balanceOf(streamId, streamDetails.recipient)\n\n                setStreamDetails({\n                    recipient: streamDetails.recipient,\n                    deposit: streamDetails.deposit,\n                    tokenAddress: streamDetails.tokanAddress,\n                    startTime: streamDetails.startTime,\n                    stopTime: streamDetails.stopTime,\n                    remainingBalance: streamDetails.remainingBalance,\n                    ratePerSecond: streamDetails.ratePerSecond,\n                    recipientBalance: recipientBalance\n                })\n            }catch (e) {\n                console.log(`Failed to obtain stream details: ${e}`)\n                setStreamDetails(undefined)\n            }\n            setLoadingDetails(false)\n        }\n        if (ERC1620Instance && streamId) {\n            loadStreamDetails()\n        }\n    }, [streamId, ERC1620Instance, web3])\n\n\n    const withdraw = async() => {\n        console.log(`Withdrawing ${streamDetails.recipientBalance.toString()}`)\n        setWithDrawing(true)\n        try {\n            let result = await ERC1620Instance.withdrawFromStream(streamId, streamDetails.recipientBalance.toString(), {from: account})\n            console.log(\"Withdraw successfull!\")\n            console.log(result)\n        } catch (e) {\n            console.log(\"Error while withdrawing: \")\n            console.log(e)\n        }\n        // reload stream details\n        let nextStreamDetails = await ERC1620Instance.getStream(streamId)\n        let recipientBalance = await ERC1620Instance.balanceOf(streamId, nextStreamDetails.recipient)\n        setStreamDetails({\n            recipient: nextStreamDetails.recipient,\n            deposit: nextStreamDetails.deposit,\n            tokenAddress: nextStreamDetails.tokenAddress,\n            startTime: nextStreamDetails.startTime,\n            stopTime: nextStreamDetails.stopTime,\n            remainingBalance: nextStreamDetails.remainingBalance,\n            ratePerSecond: nextStreamDetails.ratePerSecond,\n            recipientBalance: recipientBalance\n        })\n        setWithDrawing(false)\n    }\n\n    return (\n        <StreamDetails\n            loading={loadingDetails}\n            streamId={streamId}\n            streamDetails={streamDetails}\n            web3={web3}\n            withdrawing={withDrawing}\n            withdraw={withdraw}\n            account={account}\n            token={token}\n        />\n    )\n}\n\nexport default StreamDetailsContainer","const supportedTokens = require('../supportedTokens')\nconst contract = require(\"@truffle/contract\");\nconst ERC20Data = require(\"../contracts/ERC20Detailed\")\nconst ERC20MockData = require(\"../contracts/ERC20Mock\")\n\nconst instantiateContract = async (address, provider) => {\n    let erc20Contract = contract(ERC20Data)\n    erc20Contract.setProvider(provider)\n    let contractInstance = await erc20Contract.at(address)\n    let name = await contractInstance.name()\n    let symbol = await contractInstance.symbol()\n    let decimals = await contractInstance.decimals()\n    return {\n        name,\n        symbol,\n        decimals,\n        contractInstance,\n    }\n}\n\nconst loadTokens = async (web3) =>\n{\n    let contracts = {}\n    let networkId = await web3.eth.net.getId()\n    let tokens = supportedTokens[networkId]\n    if (!tokens || tokens.length === 0) {\n        console.log(`No token contracts defined for network ${networkId}`)\n        console.log(`Trying to load ERC20Mock`)\n        let erc20MockContract = contract(ERC20MockData)\n        erc20MockContract.setProvider(web3.currentProvider)\n        try {\n            let contractInstance = await erc20MockContract.deployed()\n            let name = await contractInstance.name()\n            let symbol = await contractInstance.symbol()\n            let decimals = await contractInstance.decimals()\n            let contractObj = {\n                name,\n                symbol,\n                decimals,\n                contractInstance\n            }\n            contracts[contractInstance.address] = contractObj\n        }\n        catch(error) {\n            console.log(`Failed to load ERC20Mock: ${error}\\nNo contracts available.`)\n        }\n    } else {\n        console.log(`Loading ${Object.keys(tokens).length} contracts for ${networkId}:`)\n        console.log(tokens)\n        for (let token of tokens) {\n            let contractObj = await instantiateContract(token.address, web3.currentProvider)\n            contracts[token.address] = contractObj\n        }\n    }\n    return(contracts)\n}\n\nexport default loadTokens","import React, {useEffect, useState} from 'react'\nimport getWeb3 from './getWeb3'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport './App.css'\nimport MainPage from './MainPage'\nimport {Container, Icon, List, Menu, Popup, Segment} from 'semantic-ui-react'\nimport StreamDetailsContainer from './Components/StreamDetails/StreamDetailsContainer'\nimport contract from '@truffle/contract'\nimport SealedSablierContractData from './contracts/SealedSablier'\nimport IERC1620ContractData from './contracts/IERC1620'\nimport loadTokens from './utils/contractLoader'\n\nfunction App() {\n  const [web3, setWeb3] = useState()\n  const [sealedSablierContractInstance, setSealedSablierContractInstance] = useState()\n  const [ERC1620ContractInstance, setERC1620ContractInstance] = useState()\n  const [availableTokens, setAvailableTokens] = useState({})\n  const [loadingWeb3, setLoadingWeb3] = useState(true)\n  const [loadingTokens, setLoadingTokens] = useState(false)\n  const [loadingSablier, setLoadingSablier] = useState(false)\n  const [loadingERC1620, setLoadingERC1620] = useState(false)\n\n  useEffect(() => {\n    const run = async () => {\n      setLoadingWeb3(true)\n      try {\n        setWeb3(await getWeb3())\n        console.log(\"Got web3\")\n      } catch (e) {\n        console.log(`Error getting web3:`)\n        console.log(e)\n        alert(\n            `Failed to load web3. Check console for details.`,\n        )\n      }\n      setLoadingWeb3(false)\n    }\n    run()\n  }, [])\n\n  useEffect(() => {\n    const obtainTokenInstances = async() => {\n      setLoadingTokens(true)\n      setAvailableTokens(await loadTokens(web3))\n      console.log(\"Got tokens\")\n      setLoadingTokens(false)\n    }\n    const obtainSealedSablierInstance = async () => {\n      setLoadingSablier(true)\n      const SealedSablierContract = contract(SealedSablierContractData)\n      SealedSablierContract.setProvider(web3.currentProvider)\n      try {\n        setSealedSablierContractInstance(await SealedSablierContract.deployed())\n        console.log(\"Got SealedSablier contract\")\n      }catch(error){\n        console.log(error)\n      }\n      setLoadingSablier(false)\n    }\n    if (web3) {\n      obtainTokenInstances()\n      obtainSealedSablierInstance()\n    }\n  }, [web3])  // should actually depend on network(ID) instead of web3 obj\n\n  useEffect(() => {\n    const obtainERC1620 = async () => {\n      setLoadingERC1620(true)\n      const ERC1620Contract = contract(IERC1620ContractData)\n      ERC1620Contract.setProvider(web3.currentProvider)\n      try {\n        setERC1620ContractInstance(await ERC1620Contract.at(await sealedSablierContractInstance.Sablier()))\n        console.log(\"Got ERC1620 contract\")\n      }catch(error){\n        console.log(error)\n      }\n      setLoadingERC1620(false)\n    }\n    if (sealedSablierContractInstance) {\n      obtainERC1620()\n    }\n  }, [sealedSablierContractInstance, web3])\n\n  const loading = (loadingWeb3 || loadingTokens || loadingSablier || loadingERC1620)\n\n  return (\n      <Router>\n\n        <Segment inverted textAlign={'center'} vertical>\n          <Menu fixed='top' inverted>\n            <Container>\n              <Menu.Item header>\n                Digital Heritage powered by &nbsp;<a href={'https://sablier.finance'} target={'_blank'}>Sablier</a>\n              </Menu.Item>\n            </Container>\n          </Menu>\n        </Segment>\n\n        <Switch>\n\n          <Route path=\"/streams/:streamId\">\n            <Segment style={{padding: '8em 0em'}} vertical>\n              <StreamDetailsContainer\n                  ERC1620Instance={ERC1620ContractInstance}\n                  web3={web3}\n              />\n            </Segment>\n          </Route>\n\n          <Route path=\"/\">\n            <MainPage\n                web3={web3}\n                sealedSablierContractInstance={sealedSablierContractInstance}\n                ERC1620ContractInstance={ERC1620ContractInstance}\n                availableTokens={availableTokens}\n                loading={loading}\n            />\n          </Route>\n\n        </Switch>\n\n        <Segment basic>\n          <Container textAlign={'center'}>\n            <List horizontal size={'huge'}>\n              <List.Item as={'a'} href={'https://github.com/TripleSpeeder/web3Inheritance'} target={'_blank'}>\n                <Popup content='github.com/TripleSpeeder/web3Inheritance' trigger={<Icon name={'github'}/>}/>\n              </List.Item>\n              <List.Item as={'a'} href={'mailto:michael@m-bauer.org'}>\n                <Popup content='michael@m-bauer.org' trigger={<Icon name={'mail outline'}/>}/>\n              </List.Item>\n            </List>\n          </Container>\n        </Segment>\n\n      </Router>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = {\n    /* Constants to find & decode CreateStream event from IERC1620:\n        event CreateStream(\n            uint256 indexed streamId,\n            address indexed sender,\n            address indexed recipient,\n            uint256 deposit,\n            address tokenAddress,\n            uint256 startTime,\n            uint256 stopTime\n        );\n\n        To calculate topicHash:\n        web3.utils.keccak256(\"CreateStream(uint256,address,address,uint256,address,uint256,uint256)\")\n     */\n    topicHash: '0x7b01d409597969366dc268d7f957a990d1ca3d3449baf8fb45db67351aecfe78',\n    eventABI: [\n        {\n            \"indexed\": true,\n            \"internalType\": \"uint256\",\n            \"name\": \"streamId\",\n            \"type\": \"uint256\"\n        },\n        {\n            \"indexed\": true,\n            \"internalType\": \"address\",\n            \"name\": \"sender\",\n            \"type\": \"address\"\n        },\n        {\n            \"indexed\": true,\n            \"internalType\": \"address\",\n            \"name\": \"recipient\",\n            \"type\": \"address\"\n        },\n        {\n            \"indexed\": false,\n            \"internalType\": \"uint256\",\n            \"name\": \"deposit\",\n            \"type\": \"uint256\"\n        },\n        {\n            \"indexed\": false,\n            \"internalType\": \"address\",\n            \"name\": \"tokenAddress\",\n            \"type\": \"address\"\n        },\n        {\n            \"indexed\": false,\n            \"internalType\": \"uint256\",\n            \"name\": \"startTime\",\n            \"type\": \"uint256\"\n        },\n        {\n            \"indexed\": false,\n            \"internalType\": \"uint256\",\n            \"name\": \"stopTime\",\n            \"type\": \"uint256\"\n        }\n    ]\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 926;","const supportedTokens = {\n    // main\n    '1': [\n            {\n                name: 'DAI',\n                address: '0x6b175474e89094c44da98b954eedeac495271d0f'\n            },\n            {\n                name: 'USDC',\n                address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n            },\n            {\n                name: 'cDAI',\n                address: '0x5d3a536e4d6dbd6114cc1ead35777bab948e3643'\n            },\n            {\n                name: 'cUSDC',\n                address: '0x39aa39c021dfbae8fac545936693ac917d5e7563'\n            }\n    ],\n    // Ropsten\n    '3': [\n        {\n            name:'TestnetDAI',\n            address: '0x2D69aD895797C880abce92437788047BA0Eb7fF6'\n        },\n        {\n            name: 'cDAI',\n            address: '0x2b536482a01e620ee111747f8334b395a42a555e'\n        },\n        {\n            name: 'cUSDC',\n            address: '0x43a1363afb28235720fcbdf0c2dab7759091f7e0'\n        }\n    ],\n    // kovan\n    '42': [\n        {\n            name:'TestnetDAI',\n            address: '0x7d669a64deb8a4a51eea755bb0e19fd39ce25ae9'\n        },\n        {\n            name: 'DAI',\n            address: '0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa',\n        },\n        {\n            name: 'cDAI',\n            address: '0xe7bc397dbd069fc7d0109c0636d06888bb50668c'\n        },\n        {\n            name: 'cUSDC',\n            address: '0xcfc9bb230f00bffdb560fce2428b4e05f3442e35'\n        }\n    ],\n    // goerli\n    '5': [\n        {\n            name:'TestnetDAI',\n            address: '0xF2D1F94310823FE26cFa9c9B6fD152834b8E7849'\n        },\n        {\n            name:'cDAI',\n            address: '0xd9fd9e875c9c1d567825e431dd6ed4f0e51aa8bf'\n        },\n        {\n            name: 'cUSDC',\n            address: '0xd9ffe966a831089981bd1539503c9d3cb45e5aab'\n        }\n    ],\n    // rinkeby\n    '4': [\n        {\n            name:'TestnetDAI',\n            address: '0xc3dbf84Abb494ce5199D5d4D815b10EC29529ff8'\n        },\n        {\n            name:'cDAI',\n            address: '0x6d7f0754ffeb405d23c51ce938289d4835be3b14'\n        },\n        {   name: 'cUSDC',\n            address: '0x5b281a6dda0b271e91ae35de655ad301c976edb1'\n        }\n    ],\n}\n\nmodule.exports = supportedTokens\n"],"sourceRoot":""}