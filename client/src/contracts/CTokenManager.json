{
  "contractName": "CTokenManager",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "DiscardCToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "WhitelistCToken",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "whitelistCToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "discardCToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "isCToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.c082d0b4\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"whitelistCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"discardCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"DiscardCToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WhitelistCToken\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Sablier\",\"methods\":{\"discardCToken(address)\":{\"details\":\"Throws if the caller is not the owner of the contract. Throws if token is not whitelisted.\",\"params\":{\"tokenAddress\":\"The address of the cToken to discard.\"}},\"initialize(address)\":{\"details\":\"The Ownable constructor sets the original `owner` of the contract to the sender account.\"},\"isCToken(address)\":{\"params\":{\"tokenAddress\":\"The address of the token to check.\"},\"return\":\"bool true=it is cToken, otherwise false.\"},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"whitelistCToken(address)\":{\"details\":\"Throws if the caller is not the owner of the contract. Throws is the token is whitelisted. Throws if the given address is not a `cToken`.\",\"params\":{\"tokenAddress\":\"The address of the cToken to whitelist.\"}}},\"title\":\"CTokenManager\"},\"userdoc\":{\"methods\":{\"constructor\":\"* Contract Logic Starts Here \",\"discardCToken(address)\":{\"notice\":\"Discards a previously whitelisted cToken.\"},\"isCToken(address)\":{\"notice\":\"Checks if the given token address is one of the whitelisted cTokens.\"},\"whitelistCToken(address)\":{\"notice\":\"Whitelists a cToken for compounding streams.\"}}}},\"settings\":{\"compilationTarget\":{\"/home/michael/WebstormProjects/sablier/packages/protocol/contracts/CTokenManager.sol\":\"CTokenManager\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/michael/WebstormProjects/sablier/packages/protocol/contracts/CTokenManager.sol\":{\"keccak256\":\"0x09d34856e01423b0d3c4663ba36b3203151bb97e3553ab01f4ce4fdef2d4c62e\",\"urls\":[\"bzz-raw://5271e9ebdc94fc3001cbed3890a9b843494b5582f91f1f341610a85775cfb867\",\"dweb:/ipfs/QmZvtnc8cNTzMhGVoTpvR6KG1nVo6ewVo3jmtEfwGjZpVg\"]},\"/home/michael/WebstormProjects/sablier/packages/protocol/contracts/interfaces/ICTokenManager.sol\":{\"keccak256\":\"0x52001c347b8af1a2ed75eff6c306998e53d2003aff1d1974381afb23fb1c7f10\",\"urls\":[\"bzz-raw://6189cdb86cdad57a5536022732c825a6e37e960c7ad21d8ff140d793542636d4\",\"dweb:/ipfs/QmSfgBkEXLRfddENZcMa9W7ipw5477Ur1p3VMn491T4b9F\"]},\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"keccak256\":\"0x0d4306da5305cb78f09c70c18ec86dbc66f22fa5ade90edc20e1ab88e16d4d10\",\"urls\":[\"bzz-raw://c89dee1b8e96cb83f529b8b5c93be6b420c1913363a3fed01241942f08cc968f\",\"dweb:/ipfs/QmfWWwzg9hah3YwZRFWvAwq91HLjCHkKnxXqP6uLGURUou\"]},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"keccak256\":\"0xf79d9851c085aa8412e87d7a26d3485488fe12538ecb4e317ce41fc1f2c3a16a\",\"urls\":[\"bzz-raw://6af1a35ad6aed2169ce9f44095438b3192cd6066903908f769d5c49a06a0caf8\",\"dweb:/ipfs/QmaH41CwJ7WrMQwSnbfCKuL2pd8bxF7sbGSLPZb6JaHBFF\"]},\"@sablier/shared-contracts/interfaces/ICERC20.sol\":{\"keccak256\":\"0xaa94199130c722b92bddfe7be409c9a79be84bf1536c22340585620c6e0e833d\",\"urls\":[\"bzz-raw://2599c2da9e8a8d2cef38d02ee368773546f600d5539deb2e1172b019b7bbef63\",\"dweb:/ipfs/QmWgw9NiYrJ9cpdMbk7LgijnE7rqZf7domM3KYT5zZ2Hbf\"]},\"@sablier/shared-contracts/lifecycle/OwnableWithoutRenounce.sol\":{\"keccak256\":\"0x20681bffccc19961afeca475dc2e8cbee3cf5788a9b0d318a609dc6812a290d1\",\"urls\":[\"bzz-raw://1b2f404687633190e4b9f66001e0f964270ff946ea2c19c142fcf8d4c18b0618\",\"dweb:/ipfs/QmVZuRZffry8bNvPJ2WneS3nN4Z8eC4a1dkDLmZsToqDrH\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506100243361002960201b6103311760201c565b610144565b600054610100900460ff168061004b575061004b6001600160e01b0361013e16565b80610059575060005460ff16155b6100ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610723602e913960400191505060405180910390fd5b600054610100900460ff161580156100d9576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561013a576000805461ff00191690555b5050565b303b1590565b6105d0806101536000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638f32d59b1161005b5780638f32d59b14610108578063c4d66de814610110578063dd21963514610136578063f2fde38b1461015c5761007d565b80630a7d2e1d146100825780632f52e595146100aa5780638da5cb5b146100e4575b600080fd5b6100a86004803603602081101561009857600080fd5b50356001600160a01b0316610182565b005b6100d0600480360360208110156100c057600080fd5b50356001600160a01b03166102de565b604080519115158252519081900360200190f35b6100ec6102fc565b604080516001600160a01b039092168252519081900360200190f35b6100d061030b565b6100a86004803603602081101561012657600080fd5b50356001600160a01b0316610331565b6100a86004803603602081101561014c57600080fd5b50356001600160a01b0316610423565b6100a86004803603602081101561017257600080fd5b50356001600160a01b03166104d7565b61018a61030b565b61019357600080fd5b61019c816102de565b156101e6576040805162461bcd60e51b815260206004820152601560248201527418d51bdad95b881a5cc81dda1a5d195b1a5cdd1959605a1b604482015290519081900360640190fd5b806001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021f57600080fd5b505afa158015610233573d6000803e3d6000fd5b505050506040513d602081101561024957600080fd5b5051610292576040805162461bcd60e51b81526020600482015260136024820152723a37b5b2b71034b9903737ba1031aa37b5b2b760691b604482015290519081900360640190fd5b6001600160a01b038116600081815260666020526040808220805460ff19166001179055517f6b059312af62bbe5ac6a9a59761eaf444083ad356cdbf3761bc98857e061ecb59190a250565b6001600160a01b031660009081526066602052604090205460ff1690565b6033546001600160a01b031690565b6033546000906001600160a01b03166103226104f4565b6001600160a01b031614905090565b600054610100900460ff168061034a575061034a6104f8565b80610358575060005460ff16155b6103935760405162461bcd60e51b815260040180806020018281038252602e81526020018061056e602e913960400191505060405180910390fd5b600054610100900460ff161580156103be576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561041f576000805461ff00191690555b5050565b61042b61030b565b61043457600080fd5b61043d816102de565b61048e576040805162461bcd60e51b815260206004820152601960248201527f63546f6b656e206973206e6f742077686974656c697374656400000000000000604482015290519081900360640190fd5b6001600160a01b038116600081815260666020526040808220805460ff19169055517f59699d7c9076678da939b1a98c86f40d8780564966fb30bf84d01b686dbb24c99190a250565b6104df61030b565b6104e857600080fd5b6104f1816104fe565b50565b3390565b303b1590565b6001600160a01b03811661051157600080fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b039290921691909117905556fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820ede456b6b24ab2e8701df53a8e48511dfd390b007b7deab58a4e48965254ef9464736f6c634300050b0032436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638f32d59b1161005b5780638f32d59b14610108578063c4d66de814610110578063dd21963514610136578063f2fde38b1461015c5761007d565b80630a7d2e1d146100825780632f52e595146100aa5780638da5cb5b146100e4575b600080fd5b6100a86004803603602081101561009857600080fd5b50356001600160a01b0316610182565b005b6100d0600480360360208110156100c057600080fd5b50356001600160a01b03166102de565b604080519115158252519081900360200190f35b6100ec6102fc565b604080516001600160a01b039092168252519081900360200190f35b6100d061030b565b6100a86004803603602081101561012657600080fd5b50356001600160a01b0316610331565b6100a86004803603602081101561014c57600080fd5b50356001600160a01b0316610423565b6100a86004803603602081101561017257600080fd5b50356001600160a01b03166104d7565b61018a61030b565b61019357600080fd5b61019c816102de565b156101e6576040805162461bcd60e51b815260206004820152601560248201527418d51bdad95b881a5cc81dda1a5d195b1a5cdd1959605a1b604482015290519081900360640190fd5b806001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021f57600080fd5b505afa158015610233573d6000803e3d6000fd5b505050506040513d602081101561024957600080fd5b5051610292576040805162461bcd60e51b81526020600482015260136024820152723a37b5b2b71034b9903737ba1031aa37b5b2b760691b604482015290519081900360640190fd5b6001600160a01b038116600081815260666020526040808220805460ff19166001179055517f6b059312af62bbe5ac6a9a59761eaf444083ad356cdbf3761bc98857e061ecb59190a250565b6001600160a01b031660009081526066602052604090205460ff1690565b6033546001600160a01b031690565b6033546000906001600160a01b03166103226104f4565b6001600160a01b031614905090565b600054610100900460ff168061034a575061034a6104f8565b80610358575060005460ff16155b6103935760405162461bcd60e51b815260040180806020018281038252602e81526020018061056e602e913960400191505060405180910390fd5b600054610100900460ff161580156103be576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561041f576000805461ff00191690555b5050565b61042b61030b565b61043457600080fd5b61043d816102de565b61048e576040805162461bcd60e51b815260206004820152601960248201527f63546f6b656e206973206e6f742077686974656c697374656400000000000000604482015290519081900360640190fd5b6001600160a01b038116600081815260666020526040808220805460ff19169055517f59699d7c9076678da939b1a98c86f40d8780564966fb30bf84d01b686dbb24c99190a250565b6104df61030b565b6104e857600080fd5b6104f1816104fe565b50565b3390565b303b1590565b6001600160a01b03811661051157600080fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b039290921691909117905556fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820ede456b6b24ab2e8701df53a8e48511dfd390b007b7deab58a4e48965254ef9464736f6c634300050b0032",
  "sourceMap": "252:1829:0:-;;;512:83;8:9:-1;5:2;;;30:1;27;20:12;5:2;512:83:0;543:45;577:10;543:33;;;;;:45;;:::i;:::-;252:1829;;1098:142:20;1024:12:15;;;;;;;;:31;;-1:-1:-1;1040:15:15;-1:-1:-1;;;;;1040:13:15;:15;:::i;:::-;1024:47;;;-1:-1:-1;1060:11:15;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:15;;;;;1225:18;1213:4;1225:18;;;1170:80;1163:6:20;:15;;-1:-1:-1;;;;;;1163:15:20;-1:-1:-1;;;;;1163:15:20;;;;;;;;;;;1193:40;;1226:6;;;-1:-1:-1;;1193:40:20;;-1:-1:-1;;1193:40:20;1268:14:15;1264:55;;;1307:5;1292:20;;-1:-1:-1;;1292:20:15;;;1264:55;1098:142:20;;:::o;1409:467:15:-;1842:7;1830:20;1864:7;1409:467;:::o;252:1829:0:-;;;;;;;",
  "deployedSourceMap": "252:1829:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;252:1829:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;941:296;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;941:296:0;-1:-1:-1;;;;;941:296:0;;:::i;:::-;;1967:112;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1967:112:0;-1:-1:-1;;;;;1967:112:0;;:::i;:::-;;;;;;;;;;;;;;;;;;1303:77:20;;;:::i;:::-;;;;-1:-1:-1;;;;;1303:77:20;;;;;;;;;;;;;;1623:92;;;:::i;1098:142::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1098:142:20;-1:-1:-1;;;;;1098:142:20;;:::i;1492:222:0:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1492:222:0;-1:-1:-1;;;;;1492:222:0;;:::i;1886:107:20:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1886:107:20;-1:-1:-1;;;;;1886:107:20;;:::i;941:296:0:-;1507:9:20;:7;:9::i;:::-;1499:18;;;;;;1026:22:0;1035:12;1026:8;:22::i;:::-;1025:23;1017:57;;;;;-1:-1:-1;;;1017:57:0;;;;;;;;;;;;-1:-1:-1;;;1017:57:0;;;;;;;;;;;;;;;1100:12;-1:-1:-1;;;;;1092:30:0;;:32;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1092:32:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1092:32:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1092:32:0;1084:64;;;;;-1:-1:-1;;;1084:64:0;;;;;;;;;;;;-1:-1:-1;;;1084:64:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;1158:21:0;;;;;;:7;:21;;;;;;:28;;-1:-1:-1;;1158:28:0;1182:4;1158:28;;;1201:29;;;1158:21;1201:29;941:296;:::o;1967:112::-;-1:-1:-1;;;;;2051:21:0;2028:4;2051:21;;;:7;:21;;;;;;;;;1967:112::o;1303:77:20:-;1367:6;;-1:-1:-1;;;;;1367:6:20;1303:77;:::o;1623:92::-;1702:6;;1663:4;;-1:-1:-1;;;;;1702:6:20;1686:12;:10;:12::i;:::-;-1:-1:-1;;;;;1686:22:20;;1679:29;;1623:92;:::o;1098:142::-;1024:12:15;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:15;;;;1059:12;1024:47;1016:106;;;;-1:-1:-1;;;1016:106:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:15;;;;;1225:18;1213:4;1225:18;;;1170:80;1163:6:20;:15;;-1:-1:-1;;;;;;1163:15:20;-1:-1:-1;;;;;1163:15:20;;;;;;;;;;;1193:40;;1226:6;;;-1:-1:-1;;1193:40:20;;-1:-1:-1;;1193:40:20;1268:14:15;1264:55;;;1307:5;1292:20;;-1:-1:-1;;1292:20:15;;;1264:55;1098:142:20;;:::o;1492:222:0:-;1507:9:20;:7;:9::i;:::-;1499:18;;;;;;1574:22:0;1583:12;1574:8;:22::i;:::-;1566:60;;;;;-1:-1:-1;;;1566:60:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1636:21:0;;1660:5;1636:21;;;:7;:21;;;;;;:29;;-1:-1:-1;;1636:29:0;;;1680:27;;;1660:5;1680:27;1492:222;:::o;1886:107:20:-;1507:9;:7;:9::i;:::-;1499:18;;;;;;1958:28;1977:8;1958:18;:28::i;:::-;1886:107;:::o;791:88:7:-;862:10;791:88;:::o;1409:467:15:-;1842:7;1830:20;1864:7;1409:467;:::o;2137:183:20:-;-1:-1:-1;;;;;2210:22:20;;2202:31;;;;;;2269:6;;2248:38;;-1:-1:-1;;;;;2248:38:20;;;;2269:6;;2248:38;;2269:6;;2248:38;2296:6;:17;;-1:-1:-1;;;;;;2296:17:20;-1:-1:-1;;;;;2296:17:20;;;;;;;;;;2137:183::o",
  "source": "pragma solidity 0.5.11;\n\nimport \"@sablier/shared-contracts/interfaces/ICERC20.sol\";\nimport \"@sablier/shared-contracts/lifecycle/OwnableWithoutRenounce.sol\";\n\nimport \"./interfaces/ICTokenManager.sol\";\n\n/**\n * @title CTokenManager\n * @author Sablier\n */\ncontract CTokenManager is ICTokenManager, OwnableWithoutRenounce {\n    /*** Storage Properties ***/\n\n    /**\n     * @notice Mapping of cTokens which can be used\n     */\n    mapping(address => bool) private cTokens;\n\n    /*** Contract Logic Starts Here */\n\n    constructor() public {\n        OwnableWithoutRenounce.initialize(msg.sender);\n    }\n\n    /*** Owner Functions ***/\n\n    /**\n     * @notice Whitelists a cToken for compounding streams.\n     * @dev Throws if the caller is not the owner of the contract.\n     *  Throws is the token is whitelisted.\n     *  Throws if the given address is not a `cToken`.\n     * @param tokenAddress The address of the cToken to whitelist.\n     */\n    function whitelistCToken(address tokenAddress) external onlyOwner {\n        require(!isCToken(tokenAddress), \"cToken is whitelisted\");\n        require(ICERC20(tokenAddress).isCToken(), \"token is not cToken\");\n        cTokens[tokenAddress] = true;\n        emit WhitelistCToken(tokenAddress);\n    }\n\n    /**\n     * @notice Discards a previously whitelisted cToken.\n     * @dev Throws if the caller is not the owner of the contract.\n     *  Throws if token is not whitelisted.\n     * @param tokenAddress The address of the cToken to discard.\n     */\n    function discardCToken(address tokenAddress) external onlyOwner {\n        require(isCToken(tokenAddress), \"cToken is not whitelisted\");\n        cTokens[tokenAddress] = false;\n        emit DiscardCToken(tokenAddress);\n    }\n\n    /*** View Functions ***/\n    /**\n     * @notice Checks if the given token address is one of the whitelisted cTokens.\n     * @param tokenAddress The address of the token to check.\n     * @return bool true=it is cToken, otherwise false.\n     */\n    function isCToken(address tokenAddress) public view returns (bool) {\n        return cTokens[tokenAddress];\n    }\n}\n",
  "sourcePath": "/home/michael/WebstormProjects/sablier/packages/protocol/contracts/CTokenManager.sol",
  "ast": {
    "absolutePath": "/home/michael/WebstormProjects/sablier/packages/protocol/contracts/CTokenManager.sol",
    "exportedSymbols": {
      "CTokenManager": [
        96
      ]
    },
    "id": 97,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.5",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "absolutePath": "@sablier/shared-contracts/interfaces/ICERC20.sol",
        "file": "@sablier/shared-contracts/interfaces/ICERC20.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 97,
        "sourceUnit": 4379,
        "src": "25:58:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@sablier/shared-contracts/lifecycle/OwnableWithoutRenounce.sol",
        "file": "@sablier/shared-contracts/lifecycle/OwnableWithoutRenounce.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 97,
        "sourceUnit": 4482,
        "src": "84:72:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/michael/WebstormProjects/sablier/packages/protocol/contracts/interfaces/ICTokenManager.sol",
        "file": "./interfaces/ICTokenManager.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 97,
        "sourceUnit": 2343,
        "src": "158:41:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5,
              "name": "ICTokenManager",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2342,
              "src": "278:14:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ICTokenManager_$2342",
                "typeString": "contract ICTokenManager"
              }
            },
            "id": 6,
            "nodeType": "InheritanceSpecifier",
            "src": "278:14:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7,
              "name": "OwnableWithoutRenounce",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4481,
              "src": "294:22:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_OwnableWithoutRenounce_$4481",
                "typeString": "contract OwnableWithoutRenounce"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "294:22:0"
          }
        ],
        "contractDependencies": [
          2342,
          2481,
          3440,
          4481
        ],
        "contractKind": "contract",
        "documentation": "@title CTokenManager\n@author Sablier",
        "fullyImplemented": true,
        "id": 96,
        "linearizedBaseContracts": [
          96,
          4481,
          2481,
          3440,
          2342
        ],
        "name": "CTokenManager",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 12,
            "name": "cTokens",
            "nodeType": "VariableDeclaration",
            "scope": 96,
            "src": "425:40:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 11,
              "keyType": {
                "id": 9,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "433:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "425:24:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 10,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "444:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 22,
              "nodeType": "Block",
              "src": "533:62:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 18,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5493,
                          "src": "577:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 19,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "577:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15,
                        "name": "OwnableWithoutRenounce",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4481,
                        "src": "543:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_OwnableWithoutRenounce_$4481_$",
                          "typeString": "type(contract OwnableWithoutRenounce)"
                        }
                      },
                      "id": 17,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialize",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4413,
                      "src": "543:33:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 20,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "543:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 21,
                  "nodeType": "ExpressionStatement",
                  "src": "543:45:0"
                }
              ]
            },
            "documentation": "* Contract Logic Starts Here ",
            "id": 23,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "523:2:0"
            },
            "returnParameters": {
              "id": 14,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "533:0:0"
            },
            "scope": 96,
            "src": "512:83:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 57,
              "nodeType": "Block",
              "src": "1007:230:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 34,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1025:23:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 32,
                              "name": "tokenAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25,
                              "src": "1035:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 31,
                            "name": "isCToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 95,
                            "src": "1026:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 33,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1026:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "63546f6b656e2069732077686974656c6973746564",
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1050:23:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9487ed807424039112da40472c0c1ff850943632213446e98c037dc96fc79893",
                          "typeString": "literal_string \"cToken is whitelisted\""
                        },
                        "value": "cToken is whitelisted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9487ed807424039112da40472c0c1ff850943632213446e98c037dc96fc79893",
                          "typeString": "literal_string \"cToken is whitelisted\""
                        }
                      ],
                      "id": 30,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5496,
                        5497
                      ],
                      "referencedDeclaration": 5497,
                      "src": "1017:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 36,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1017:57:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 37,
                  "nodeType": "ExpressionStatement",
                  "src": "1017:57:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 40,
                                "name": "tokenAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 25,
                                "src": "1100:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 39,
                              "name": "ICERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4378,
                              "src": "1092:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ICERC20_$4378_$",
                                "typeString": "type(contract ICERC20)"
                              }
                            },
                            "id": 41,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1092:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ICERC20_$4378",
                              "typeString": "contract ICERC20"
                            }
                          },
                          "id": 42,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "isCToken",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4315,
                          "src": "1092:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                            "typeString": "function () view external returns (bool)"
                          }
                        },
                        "id": 43,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1092:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "746f6b656e206973206e6f742063546f6b656e",
                        "id": 44,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1126:21:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_94408918d0155190e3219a7946203c292f159a9552a70d918c2bb3d30a65fab3",
                          "typeString": "literal_string \"token is not cToken\""
                        },
                        "value": "token is not cToken"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_94408918d0155190e3219a7946203c292f159a9552a70d918c2bb3d30a65fab3",
                          "typeString": "literal_string \"token is not cToken\""
                        }
                      ],
                      "id": 38,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5496,
                        5497
                      ],
                      "referencedDeclaration": 5497,
                      "src": "1084:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 45,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1084:64:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46,
                  "nodeType": "ExpressionStatement",
                  "src": "1084:64:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 47,
                        "name": "cTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "1158:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 49,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 48,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25,
                        "src": "1166:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1158:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 50,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1182:4:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1158:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 52,
                  "nodeType": "ExpressionStatement",
                  "src": "1158:28:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 54,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25,
                        "src": "1217:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 53,
                      "name": "WhitelistCToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2324,
                      "src": "1201:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1201:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 56,
                  "nodeType": "EmitStatement",
                  "src": "1196:34:0"
                }
              ]
            },
            "documentation": "@notice Whitelists a cToken for compounding streams.\n@dev Throws if the caller is not the owner of the contract.\n Throws is the token is whitelisted.\n Throws if the given address is not a `cToken`.\n@param tokenAddress The address of the cToken to whitelist.",
            "id": 58,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 28,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 27,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4430,
                  "src": "997:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "997:9:0"
              }
            ],
            "name": "whitelistCToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25,
                  "name": "tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 58,
                  "src": "966:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 24,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "966:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "965:22:0"
            },
            "returnParameters": {
              "id": 29,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1007:0:0"
            },
            "scope": 96,
            "src": "941:296:0",
            "stateMutability": "nonpayable",
            "superFunction": 2329,
            "visibility": "external"
          },
          {
            "body": {
              "id": 82,
              "nodeType": "Block",
              "src": "1556:158:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 67,
                            "name": "tokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60,
                            "src": "1583:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 66,
                          "name": "isCToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 95,
                          "src": "1574:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 68,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1574:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "63546f6b656e206973206e6f742077686974656c6973746564",
                        "id": 69,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1598:27:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_028effcaad1abe4d036a94b79064c8ab8a88c2efe091f889a81695f48476bae9",
                          "typeString": "literal_string \"cToken is not whitelisted\""
                        },
                        "value": "cToken is not whitelisted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_028effcaad1abe4d036a94b79064c8ab8a88c2efe091f889a81695f48476bae9",
                          "typeString": "literal_string \"cToken is not whitelisted\""
                        }
                      ],
                      "id": 65,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5496,
                        5497
                      ],
                      "referencedDeclaration": 5497,
                      "src": "1566:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 70,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1566:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 71,
                  "nodeType": "ExpressionStatement",
                  "src": "1566:60:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 76,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 72,
                        "name": "cTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "1636:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 74,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 73,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "1644:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1636:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "66616c7365",
                      "id": 75,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1660:5:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "1636:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 77,
                  "nodeType": "ExpressionStatement",
                  "src": "1636:29:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 79,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "1694:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 78,
                      "name": "DiscardCToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2320,
                      "src": "1680:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 80,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1680:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 81,
                  "nodeType": "EmitStatement",
                  "src": "1675:32:0"
                }
              ]
            },
            "documentation": "@notice Discards a previously whitelisted cToken.\n@dev Throws if the caller is not the owner of the contract.\n Throws if token is not whitelisted.\n@param tokenAddress The address of the cToken to discard.",
            "id": 83,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 63,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 62,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4430,
                  "src": "1546:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1546:9:0"
              }
            ],
            "name": "discardCToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60,
                  "name": "tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 83,
                  "src": "1515:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1515:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1514:22:0"
            },
            "returnParameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1556:0:0"
            },
            "scope": 96,
            "src": "1492:222:0",
            "stateMutability": "nonpayable",
            "superFunction": 2334,
            "visibility": "external"
          },
          {
            "body": {
              "id": 94,
              "nodeType": "Block",
              "src": "2034:45:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 90,
                      "name": "cTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12,
                      "src": "2051:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 92,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 91,
                      "name": "tokenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 85,
                      "src": "2059:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2051:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 89,
                  "id": 93,
                  "nodeType": "Return",
                  "src": "2044:28:0"
                }
              ]
            },
            "documentation": "@notice Checks if the given token address is one of the whitelisted cTokens.\n@param tokenAddress The address of the token to check.\n@return bool true=it is cToken, otherwise false.",
            "id": 95,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isCToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 86,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 85,
                  "name": "tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 95,
                  "src": "1985:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 84,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1985:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1984:22:0"
            },
            "returnParameters": {
              "id": 89,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 88,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 95,
                  "src": "2028:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 87,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2028:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2027:6:0"
            },
            "scope": 96,
            "src": "1967:112:0",
            "stateMutability": "view",
            "superFunction": 2341,
            "visibility": "public"
          }
        ],
        "scope": 97,
        "src": "252:1829:0"
      }
    ],
    "src": "0:2082:0"
  },
  "legacyAST": {
    "absolutePath": "/home/michael/WebstormProjects/sablier/packages/protocol/contracts/CTokenManager.sol",
    "exportedSymbols": {
      "CTokenManager": [
        96
      ]
    },
    "id": 97,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.5",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "absolutePath": "@sablier/shared-contracts/interfaces/ICERC20.sol",
        "file": "@sablier/shared-contracts/interfaces/ICERC20.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 97,
        "sourceUnit": 4379,
        "src": "25:58:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@sablier/shared-contracts/lifecycle/OwnableWithoutRenounce.sol",
        "file": "@sablier/shared-contracts/lifecycle/OwnableWithoutRenounce.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 97,
        "sourceUnit": 4482,
        "src": "84:72:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/michael/WebstormProjects/sablier/packages/protocol/contracts/interfaces/ICTokenManager.sol",
        "file": "./interfaces/ICTokenManager.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 97,
        "sourceUnit": 2343,
        "src": "158:41:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5,
              "name": "ICTokenManager",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2342,
              "src": "278:14:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ICTokenManager_$2342",
                "typeString": "contract ICTokenManager"
              }
            },
            "id": 6,
            "nodeType": "InheritanceSpecifier",
            "src": "278:14:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7,
              "name": "OwnableWithoutRenounce",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4481,
              "src": "294:22:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_OwnableWithoutRenounce_$4481",
                "typeString": "contract OwnableWithoutRenounce"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "294:22:0"
          }
        ],
        "contractDependencies": [
          2342,
          2481,
          3440,
          4481
        ],
        "contractKind": "contract",
        "documentation": "@title CTokenManager\n@author Sablier",
        "fullyImplemented": true,
        "id": 96,
        "linearizedBaseContracts": [
          96,
          4481,
          2481,
          3440,
          2342
        ],
        "name": "CTokenManager",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 12,
            "name": "cTokens",
            "nodeType": "VariableDeclaration",
            "scope": 96,
            "src": "425:40:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 11,
              "keyType": {
                "id": 9,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "433:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "425:24:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 10,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "444:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 22,
              "nodeType": "Block",
              "src": "533:62:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 18,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5493,
                          "src": "577:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 19,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "577:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15,
                        "name": "OwnableWithoutRenounce",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4481,
                        "src": "543:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_OwnableWithoutRenounce_$4481_$",
                          "typeString": "type(contract OwnableWithoutRenounce)"
                        }
                      },
                      "id": 17,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialize",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4413,
                      "src": "543:33:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 20,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "543:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 21,
                  "nodeType": "ExpressionStatement",
                  "src": "543:45:0"
                }
              ]
            },
            "documentation": "* Contract Logic Starts Here ",
            "id": 23,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "523:2:0"
            },
            "returnParameters": {
              "id": 14,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "533:0:0"
            },
            "scope": 96,
            "src": "512:83:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 57,
              "nodeType": "Block",
              "src": "1007:230:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 34,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1025:23:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 32,
                              "name": "tokenAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25,
                              "src": "1035:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 31,
                            "name": "isCToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 95,
                            "src": "1026:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 33,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1026:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "63546f6b656e2069732077686974656c6973746564",
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1050:23:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9487ed807424039112da40472c0c1ff850943632213446e98c037dc96fc79893",
                          "typeString": "literal_string \"cToken is whitelisted\""
                        },
                        "value": "cToken is whitelisted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9487ed807424039112da40472c0c1ff850943632213446e98c037dc96fc79893",
                          "typeString": "literal_string \"cToken is whitelisted\""
                        }
                      ],
                      "id": 30,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5496,
                        5497
                      ],
                      "referencedDeclaration": 5497,
                      "src": "1017:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 36,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1017:57:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 37,
                  "nodeType": "ExpressionStatement",
                  "src": "1017:57:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 40,
                                "name": "tokenAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 25,
                                "src": "1100:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 39,
                              "name": "ICERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4378,
                              "src": "1092:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ICERC20_$4378_$",
                                "typeString": "type(contract ICERC20)"
                              }
                            },
                            "id": 41,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1092:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ICERC20_$4378",
                              "typeString": "contract ICERC20"
                            }
                          },
                          "id": 42,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "isCToken",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4315,
                          "src": "1092:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                            "typeString": "function () view external returns (bool)"
                          }
                        },
                        "id": 43,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1092:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "746f6b656e206973206e6f742063546f6b656e",
                        "id": 44,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1126:21:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_94408918d0155190e3219a7946203c292f159a9552a70d918c2bb3d30a65fab3",
                          "typeString": "literal_string \"token is not cToken\""
                        },
                        "value": "token is not cToken"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_94408918d0155190e3219a7946203c292f159a9552a70d918c2bb3d30a65fab3",
                          "typeString": "literal_string \"token is not cToken\""
                        }
                      ],
                      "id": 38,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5496,
                        5497
                      ],
                      "referencedDeclaration": 5497,
                      "src": "1084:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 45,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1084:64:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46,
                  "nodeType": "ExpressionStatement",
                  "src": "1084:64:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 47,
                        "name": "cTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "1158:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 49,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 48,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25,
                        "src": "1166:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1158:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 50,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1182:4:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1158:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 52,
                  "nodeType": "ExpressionStatement",
                  "src": "1158:28:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 54,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25,
                        "src": "1217:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 53,
                      "name": "WhitelistCToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2324,
                      "src": "1201:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1201:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 56,
                  "nodeType": "EmitStatement",
                  "src": "1196:34:0"
                }
              ]
            },
            "documentation": "@notice Whitelists a cToken for compounding streams.\n@dev Throws if the caller is not the owner of the contract.\n Throws is the token is whitelisted.\n Throws if the given address is not a `cToken`.\n@param tokenAddress The address of the cToken to whitelist.",
            "id": 58,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 28,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 27,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4430,
                  "src": "997:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "997:9:0"
              }
            ],
            "name": "whitelistCToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25,
                  "name": "tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 58,
                  "src": "966:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 24,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "966:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "965:22:0"
            },
            "returnParameters": {
              "id": 29,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1007:0:0"
            },
            "scope": 96,
            "src": "941:296:0",
            "stateMutability": "nonpayable",
            "superFunction": 2329,
            "visibility": "external"
          },
          {
            "body": {
              "id": 82,
              "nodeType": "Block",
              "src": "1556:158:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 67,
                            "name": "tokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60,
                            "src": "1583:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 66,
                          "name": "isCToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 95,
                          "src": "1574:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 68,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1574:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "63546f6b656e206973206e6f742077686974656c6973746564",
                        "id": 69,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1598:27:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_028effcaad1abe4d036a94b79064c8ab8a88c2efe091f889a81695f48476bae9",
                          "typeString": "literal_string \"cToken is not whitelisted\""
                        },
                        "value": "cToken is not whitelisted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_028effcaad1abe4d036a94b79064c8ab8a88c2efe091f889a81695f48476bae9",
                          "typeString": "literal_string \"cToken is not whitelisted\""
                        }
                      ],
                      "id": 65,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5496,
                        5497
                      ],
                      "referencedDeclaration": 5497,
                      "src": "1566:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 70,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1566:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 71,
                  "nodeType": "ExpressionStatement",
                  "src": "1566:60:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 76,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 72,
                        "name": "cTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "1636:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 74,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 73,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "1644:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1636:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "66616c7365",
                      "id": 75,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1660:5:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "1636:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 77,
                  "nodeType": "ExpressionStatement",
                  "src": "1636:29:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 79,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "1694:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 78,
                      "name": "DiscardCToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2320,
                      "src": "1680:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 80,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1680:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 81,
                  "nodeType": "EmitStatement",
                  "src": "1675:32:0"
                }
              ]
            },
            "documentation": "@notice Discards a previously whitelisted cToken.\n@dev Throws if the caller is not the owner of the contract.\n Throws if token is not whitelisted.\n@param tokenAddress The address of the cToken to discard.",
            "id": 83,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 63,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 62,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4430,
                  "src": "1546:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1546:9:0"
              }
            ],
            "name": "discardCToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60,
                  "name": "tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 83,
                  "src": "1515:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1515:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1514:22:0"
            },
            "returnParameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1556:0:0"
            },
            "scope": 96,
            "src": "1492:222:0",
            "stateMutability": "nonpayable",
            "superFunction": 2334,
            "visibility": "external"
          },
          {
            "body": {
              "id": 94,
              "nodeType": "Block",
              "src": "2034:45:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 90,
                      "name": "cTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12,
                      "src": "2051:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 92,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 91,
                      "name": "tokenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 85,
                      "src": "2059:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2051:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 89,
                  "id": 93,
                  "nodeType": "Return",
                  "src": "2044:28:0"
                }
              ]
            },
            "documentation": "@notice Checks if the given token address is one of the whitelisted cTokens.\n@param tokenAddress The address of the token to check.\n@return bool true=it is cToken, otherwise false.",
            "id": 95,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isCToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 86,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 85,
                  "name": "tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 95,
                  "src": "1985:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 84,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1985:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1984:22:0"
            },
            "returnParameters": {
              "id": 89,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 88,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 95,
                  "src": "2028:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 87,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2028:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2027:6:0"
            },
            "scope": 96,
            "src": "1967:112:0",
            "stateMutability": "view",
            "superFunction": 2341,
            "visibility": "public"
          }
        ],
        "scope": 97,
        "src": "252:1829:0"
      }
    ],
    "src": "0:2082:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.11+commit.c082d0b4.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.20",
  "updatedAt": "2020-01-10T11:33:18.732Z",
  "networkType": "ethereum",
  "devdoc": {
    "author": "Sablier",
    "methods": {
      "discardCToken(address)": {
        "details": "Throws if the caller is not the owner of the contract. Throws if token is not whitelisted.",
        "params": {
          "tokenAddress": "The address of the cToken to discard."
        }
      },
      "initialize(address)": {
        "details": "The Ownable constructor sets the original `owner` of the contract to the sender account."
      },
      "isCToken(address)": {
        "params": {
          "tokenAddress": "The address of the token to check."
        },
        "return": "bool true=it is cToken, otherwise false."
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      },
      "whitelistCToken(address)": {
        "details": "Throws if the caller is not the owner of the contract. Throws is the token is whitelisted. Throws if the given address is not a `cToken`.",
        "params": {
          "tokenAddress": "The address of the cToken to whitelist."
        }
      }
    },
    "title": "CTokenManager"
  },
  "userdoc": {
    "methods": {
      "constructor": "* Contract Logic Starts Here ",
      "discardCToken(address)": {
        "notice": "Discards a previously whitelisted cToken."
      },
      "isCToken(address)": {
        "notice": "Checks if the given token address is one of the whitelisted cTokens."
      },
      "whitelistCToken(address)": {
        "notice": "Whitelists a cToken for compounding streams."
      }
    }
  }
}